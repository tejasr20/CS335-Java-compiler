#define YY_parse_h_included
/*#define YY_USE_CLASS 
*/
/*  A Bison++ parser, made from parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */


#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "parser.y"

#include<bits/stdc++.h>
#include<iostream>
#include <stdio.h>
#include <string>
#include <vector>
#include <unordered_map>
#include "tree.h"

using namespace std;
extern int yylineno;
extern FILE* yyin;
FILE* fp;
extern char* yytext;
extern int column;
int yyerror(const char*);
extern int yylex();
extern int yyparse();
bool verbose= false;
FILE* dotfile;
char* file;

extern int yyrestart(FILE*);
extern FILE* yyin;
#define YYERROR_VERBOSE

#line 28 "parser.y"
typedef union{
	char* str;
	int number;
	Node* ptr;
} yy_parse_stype;
#define YY_parse_STYPE yy_parse_stype
#ifndef YY_USE_CLASS
#define YYSTYPE yy_parse_stype
#endif

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_parse_BISON 1

#ifndef YY_parse_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_parse_COMPATIBILITY 1
 #else
  #define  YY_parse_COMPATIBILITY 0
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_parse_LTYPE
   #define YY_parse_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_parse_STYPE 
   #define YY_parse_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_parse_DEBUG
   #define  YY_parse_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_parse_USE_GOTO
  #define YY_parse_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_parse_USE_GOTO
 #define YY_parse_USE_GOTO 0
#endif

#ifndef YY_parse_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_parse_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_parse_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_parse_DEBUG */
#endif


#ifndef YY_parse_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_parse_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_parse_LSP_NEEDED
#ifndef YY_parse_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_parse_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_parse_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_parse_STYPE
#define YY_parse_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_parse_PARSE
#define YY_parse_PARSE yyparse
#endif
#ifndef YY_parse_LEX
#define YY_parse_LEX yylex
#endif
#ifndef YY_parse_LVAL
#define YY_parse_LVAL yylval
#endif
#ifndef YY_parse_LLOC
#define YY_parse_LLOC yylloc
#endif
#ifndef YY_parse_CHAR
#define YY_parse_CHAR yychar
#endif
#ifndef YY_parse_NERRS
#define YY_parse_NERRS yynerrs
#endif
#ifndef YY_parse_DEBUG_FLAG
#define YY_parse_DEBUG_FLAG yydebug
#endif
#ifndef YY_parse_ERROR
#define YY_parse_ERROR yyerror
#endif

#ifndef YY_parse_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_parse_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_parse_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_parse_PARSE_PARAM
  #define YY_parse_PARSE_PARAM void
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_parse_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_parse_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_parse_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_parse_PURE
#  ifndef YYPURE
#    define YYPURE YY_parse_PURE
#  endif
#endif

#ifdef YY_parse_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_parse_DEBUG 
#  endif
#endif

#ifndef YY_parse_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_parse_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_parse_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_parse_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	ABSTRACT	258
#define	ASSERT	259
#define	BOOLEAN	260
#define	BREAK	261
#define	BYTE	262
#define	CASE	263
#define	CATCH	264
#define	CHAR	265
#define	CLASS	266
#define	COMMENT	267
#define	CONST	268
#define	CONTINUE	269
#define	DEFAULT	270
#define	DO	271
#define	DOUBLE	272
#define	ELSE	273
#define	ENUM	274
#define	ERROR	275
#define	EXTENDS	276
#define	FINALLY	277
#define	FINAL	278
#define	FLOAT	279
#define	FOR	280
#define	IDENTIFIER	281
#define	IF	282
#define	GOTO	283
#define	IMPLEMENTS	284
#define	IMPORT	285
#define	INSTANCEOF	286
#define	INT	287
#define	INTERFACE	288
#define	LITERAL	289
#define	LONG	290
#define	NATIVE	291
#define	NEW	292
#define	PACKAGE	293
#define	PRIVATE	294
#define	PROTECTED	295
#define	PUBLIC	296
#define	RETURN	297
#define	SHORT	298
#define	STATIC	299
#define	STRICTFP	300
#define	SUPER	301
#define	SWITCH	302
#define	SYNCHRONIZED	303
#define	THIS	304
#define	THROWS	305
#define	THROW	306
#define	TRANSIENT	307
#define	TRY	308
#define	VOID	309
#define	VOLATILE	310
#define	WHILE	311
#define	EQUALS	312
#define	GT	313
#define	LT	314
#define	NT	315
#define	TILDA	316
#define	QUESTION_MARK	317
#define	COLON	318
#define	ARROW	319
#define	EQEQ	320
#define	GREQ	321
#define	LEQ	322
#define	NEQUALS	323
#define	PLUSPLUS	324
#define	MINUSMINUS	325
#define	OR	326
#define	AND	327
#define	ADD	328
#define	SUBTRACT	329
#define	MULTIPLY	330
#define	DIVISION	331
#define	BINARYOR	332
#define	BINARYAND	333
#define	POW	334
#define	MOD	335
#define	GRGR	336
#define	LTLT	337
#define	GRGRGR	338
#define	PLEQ	339
#define	SBEQ	340
#define	MULEQ	341
#define	ANDEQ	342
#define	OREQ	343
#define	POWEQ	344
#define	DIVEQ	345
#define	MODEQ	346
#define	DGRGR	347
#define	DLRLR	348
#define	TGRGRGR	349
#define	OC	350
#define	CC	351
#define	OSQ	352
#define	CSQ	353
#define	OS	354
#define	CS	355
#define	COMMA	356
#define	DISTO	357
#define	ATR	358
#define	TDT	359
#define	FST	360
#define	SCLN	361
#define	DST	362


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_parse_CLASS
#define YY_parse_CLASS parse
#endif
#ifndef YY_parse_INHERIT
#define YY_parse_INHERIT
#endif
#ifndef YY_parse_MEMBERS
#define YY_parse_MEMBERS 
#endif
#ifndef YY_parse_LEX_BODY
#define YY_parse_LEX_BODY  
#endif
#ifndef YY_parse_ERROR_BODY
#define YY_parse_ERROR_BODY  
#endif
#ifndef YY_parse_CONSTRUCTOR_PARAM
#define YY_parse_CONSTRUCTOR_PARAM
#endif
#ifndef YY_parse_CONSTRUCTOR_CODE
#define YY_parse_CONSTRUCTOR_CODE
#endif
#ifndef YY_parse_CONSTRUCTOR_INIT
#define YY_parse_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_parse_USE_CONST_TOKEN
#define YY_parse_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_parse_USE_CONST_TOKEN != 0
#ifndef YY_parse_ENUM_TOKEN
#define YY_parse_ENUM_TOKEN yy_parse_enum_token
#endif
#endif

class YY_parse_CLASS YY_parse_INHERIT
{
public: 
#if YY_parse_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int ABSTRACT;
static const int ASSERT;
static const int BOOLEAN;
static const int BREAK;
static const int BYTE;
static const int CASE;
static const int CATCH;
static const int CHAR;
static const int CLASS;
static const int COMMENT;
static const int CONST;
static const int CONTINUE;
static const int DEFAULT;
static const int DO;
static const int DOUBLE;
static const int ELSE;
static const int ENUM;
static const int ERROR;
static const int EXTENDS;
static const int FINALLY;
static const int FINAL;
static const int FLOAT;
static const int FOR;
static const int IDENTIFIER;
static const int IF;
static const int GOTO;
static const int IMPLEMENTS;
static const int IMPORT;
static const int INSTANCEOF;
static const int INT;
static const int INTERFACE;
static const int LITERAL;
static const int LONG;
static const int NATIVE;
static const int NEW;
static const int PACKAGE;
static const int PRIVATE;
static const int PROTECTED;
static const int PUBLIC;
static const int RETURN;
static const int SHORT;
static const int STATIC;
static const int STRICTFP;
static const int SUPER;
static const int SWITCH;
static const int SYNCHRONIZED;
static const int THIS;
static const int THROWS;
static const int THROW;
static const int TRANSIENT;
static const int TRY;
static const int VOID;
static const int VOLATILE;
static const int WHILE;
static const int EQUALS;
static const int GT;
static const int LT;
static const int NT;
static const int TILDA;
static const int QUESTION_MARK;
static const int COLON;
static const int ARROW;
static const int EQEQ;
static const int GREQ;
static const int LEQ;
static const int NEQUALS;
static const int PLUSPLUS;
static const int MINUSMINUS;
static const int OR;
static const int AND;
static const int ADD;
static const int SUBTRACT;
static const int MULTIPLY;
static const int DIVISION;
static const int BINARYOR;
static const int BINARYAND;
static const int POW;
static const int MOD;
static const int GRGR;
static const int LTLT;
static const int GRGRGR;
static const int PLEQ;
static const int SBEQ;
static const int MULEQ;
static const int ANDEQ;
static const int OREQ;
static const int POWEQ;
static const int DIVEQ;
static const int MODEQ;
static const int DGRGR;
static const int DLRLR;
static const int TGRGRGR;
static const int OC;
static const int CC;
static const int OSQ;
static const int CSQ;
static const int OS;
static const int CS;
static const int COMMA;
static const int DISTO;
static const int ATR;
static const int TDT;
static const int FST;
static const int SCLN;
static const int DST;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_parse_ENUM_TOKEN { YY_parse_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,ABSTRACT=258
	,ASSERT=259
	,BOOLEAN=260
	,BREAK=261
	,BYTE=262
	,CASE=263
	,CATCH=264
	,CHAR=265
	,CLASS=266
	,COMMENT=267
	,CONST=268
	,CONTINUE=269
	,DEFAULT=270
	,DO=271
	,DOUBLE=272
	,ELSE=273
	,ENUM=274
	,ERROR=275
	,EXTENDS=276
	,FINALLY=277
	,FINAL=278
	,FLOAT=279
	,FOR=280
	,IDENTIFIER=281
	,IF=282
	,GOTO=283
	,IMPLEMENTS=284
	,IMPORT=285
	,INSTANCEOF=286
	,INT=287
	,INTERFACE=288
	,LITERAL=289
	,LONG=290
	,NATIVE=291
	,NEW=292
	,PACKAGE=293
	,PRIVATE=294
	,PROTECTED=295
	,PUBLIC=296
	,RETURN=297
	,SHORT=298
	,STATIC=299
	,STRICTFP=300
	,SUPER=301
	,SWITCH=302
	,SYNCHRONIZED=303
	,THIS=304
	,THROWS=305
	,THROW=306
	,TRANSIENT=307
	,TRY=308
	,VOID=309
	,VOLATILE=310
	,WHILE=311
	,EQUALS=312
	,GT=313
	,LT=314
	,NT=315
	,TILDA=316
	,QUESTION_MARK=317
	,COLON=318
	,ARROW=319
	,EQEQ=320
	,GREQ=321
	,LEQ=322
	,NEQUALS=323
	,PLUSPLUS=324
	,MINUSMINUS=325
	,OR=326
	,AND=327
	,ADD=328
	,SUBTRACT=329
	,MULTIPLY=330
	,DIVISION=331
	,BINARYOR=332
	,BINARYAND=333
	,POW=334
	,MOD=335
	,GRGR=336
	,LTLT=337
	,GRGRGR=338
	,PLEQ=339
	,SBEQ=340
	,MULEQ=341
	,ANDEQ=342
	,OREQ=343
	,POWEQ=344
	,DIVEQ=345
	,MODEQ=346
	,DGRGR=347
	,DLRLR=348
	,TGRGRGR=349
	,OC=350
	,CC=351
	,OSQ=352
	,CSQ=353
	,OS=354
	,CS=355
	,COMMA=356
	,DISTO=357
	,ATR=358
	,TDT=359
	,FST=360
	,SCLN=361
	,DST=362


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_parse_PARSE (YY_parse_PARSE_PARAM);
 virtual void YY_parse_ERROR(char *msg) YY_parse_ERROR_BODY;
#ifdef YY_parse_PURE
#ifdef YY_parse_LSP_NEEDED
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL,YY_parse_LTYPE *YY_parse_LLOC) YY_parse_LEX_BODY;
#else
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL) YY_parse_LEX_BODY;
#endif
#else
 virtual int YY_parse_LEX() YY_parse_LEX_BODY;
 YY_parse_STYPE YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
 YY_parse_LTYPE YY_parse_LLOC;
#endif
 int   YY_parse_NERRS;
 int    YY_parse_CHAR;
#endif
#if YY_parse_DEBUG != 0
 int YY_parse_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM);
public:
 YY_parse_MEMBERS 
};
/* other declare folow */
#if YY_parse_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_parse_CLASS::ABSTRACT=258;
const int YY_parse_CLASS::ASSERT=259;
const int YY_parse_CLASS::BOOLEAN=260;
const int YY_parse_CLASS::BREAK=261;
const int YY_parse_CLASS::BYTE=262;
const int YY_parse_CLASS::CASE=263;
const int YY_parse_CLASS::CATCH=264;
const int YY_parse_CLASS::CHAR=265;
const int YY_parse_CLASS::CLASS=266;
const int YY_parse_CLASS::COMMENT=267;
const int YY_parse_CLASS::CONST=268;
const int YY_parse_CLASS::CONTINUE=269;
const int YY_parse_CLASS::DEFAULT=270;
const int YY_parse_CLASS::DO=271;
const int YY_parse_CLASS::DOUBLE=272;
const int YY_parse_CLASS::ELSE=273;
const int YY_parse_CLASS::ENUM=274;
const int YY_parse_CLASS::ERROR=275;
const int YY_parse_CLASS::EXTENDS=276;
const int YY_parse_CLASS::FINALLY=277;
const int YY_parse_CLASS::FINAL=278;
const int YY_parse_CLASS::FLOAT=279;
const int YY_parse_CLASS::FOR=280;
const int YY_parse_CLASS::IDENTIFIER=281;
const int YY_parse_CLASS::IF=282;
const int YY_parse_CLASS::GOTO=283;
const int YY_parse_CLASS::IMPLEMENTS=284;
const int YY_parse_CLASS::IMPORT=285;
const int YY_parse_CLASS::INSTANCEOF=286;
const int YY_parse_CLASS::INT=287;
const int YY_parse_CLASS::INTERFACE=288;
const int YY_parse_CLASS::LITERAL=289;
const int YY_parse_CLASS::LONG=290;
const int YY_parse_CLASS::NATIVE=291;
const int YY_parse_CLASS::NEW=292;
const int YY_parse_CLASS::PACKAGE=293;
const int YY_parse_CLASS::PRIVATE=294;
const int YY_parse_CLASS::PROTECTED=295;
const int YY_parse_CLASS::PUBLIC=296;
const int YY_parse_CLASS::RETURN=297;
const int YY_parse_CLASS::SHORT=298;
const int YY_parse_CLASS::STATIC=299;
const int YY_parse_CLASS::STRICTFP=300;
const int YY_parse_CLASS::SUPER=301;
const int YY_parse_CLASS::SWITCH=302;
const int YY_parse_CLASS::SYNCHRONIZED=303;
const int YY_parse_CLASS::THIS=304;
const int YY_parse_CLASS::THROWS=305;
const int YY_parse_CLASS::THROW=306;
const int YY_parse_CLASS::TRANSIENT=307;
const int YY_parse_CLASS::TRY=308;
const int YY_parse_CLASS::VOID=309;
const int YY_parse_CLASS::VOLATILE=310;
const int YY_parse_CLASS::WHILE=311;
const int YY_parse_CLASS::EQUALS=312;
const int YY_parse_CLASS::GT=313;
const int YY_parse_CLASS::LT=314;
const int YY_parse_CLASS::NT=315;
const int YY_parse_CLASS::TILDA=316;
const int YY_parse_CLASS::QUESTION_MARK=317;
const int YY_parse_CLASS::COLON=318;
const int YY_parse_CLASS::ARROW=319;
const int YY_parse_CLASS::EQEQ=320;
const int YY_parse_CLASS::GREQ=321;
const int YY_parse_CLASS::LEQ=322;
const int YY_parse_CLASS::NEQUALS=323;
const int YY_parse_CLASS::PLUSPLUS=324;
const int YY_parse_CLASS::MINUSMINUS=325;
const int YY_parse_CLASS::OR=326;
const int YY_parse_CLASS::AND=327;
const int YY_parse_CLASS::ADD=328;
const int YY_parse_CLASS::SUBTRACT=329;
const int YY_parse_CLASS::MULTIPLY=330;
const int YY_parse_CLASS::DIVISION=331;
const int YY_parse_CLASS::BINARYOR=332;
const int YY_parse_CLASS::BINARYAND=333;
const int YY_parse_CLASS::POW=334;
const int YY_parse_CLASS::MOD=335;
const int YY_parse_CLASS::GRGR=336;
const int YY_parse_CLASS::LTLT=337;
const int YY_parse_CLASS::GRGRGR=338;
const int YY_parse_CLASS::PLEQ=339;
const int YY_parse_CLASS::SBEQ=340;
const int YY_parse_CLASS::MULEQ=341;
const int YY_parse_CLASS::ANDEQ=342;
const int YY_parse_CLASS::OREQ=343;
const int YY_parse_CLASS::POWEQ=344;
const int YY_parse_CLASS::DIVEQ=345;
const int YY_parse_CLASS::MODEQ=346;
const int YY_parse_CLASS::DGRGR=347;
const int YY_parse_CLASS::DLRLR=348;
const int YY_parse_CLASS::TGRGRGR=349;
const int YY_parse_CLASS::OC=350;
const int YY_parse_CLASS::CC=351;
const int YY_parse_CLASS::OSQ=352;
const int YY_parse_CLASS::CSQ=353;
const int YY_parse_CLASS::OS=354;
const int YY_parse_CLASS::CS=355;
const int YY_parse_CLASS::COMMA=356;
const int YY_parse_CLASS::DISTO=357;
const int YY_parse_CLASS::ATR=358;
const int YY_parse_CLASS::TDT=359;
const int YY_parse_CLASS::FST=360;
const int YY_parse_CLASS::SCLN=361;
const int YY_parse_CLASS::DST=362;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_parse_CLASS::token */
#endif
/*apres const  */
YY_parse_CLASS::YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM) YY_parse_CONSTRUCTOR_INIT
{
#if YY_parse_DEBUG != 0
YY_parse_DEBUG_FLAG=0;
#endif
YY_parse_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		614
#define	YYFLAG		-32768
#define	YYNTBASE	109

#define YYTRANSLATE(x) ((unsigned)(x) <= 362 ? yytranslate[x] : 246)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,   108,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107
};

#if YY_parse_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
    40,    44,    48,    52,    54,    56,    58,    62,    66,    68,
    71,    73,    75,    78,    81,    83,    86,    88,    91,    95,
    97,    99,   103,   108,   110,   112,   114,   116,   119,   121,
   123,   125,   127,   129,   131,   133,   135,   137,   139,   146,
   151,   157,   162,   167,   171,   177,   183,   186,   189,   191,
   195,   198,   202,   204,   207,   209,   211,   213,   215,   217,
   222,   226,   228,   232,   234,   238,   240,   244,   246,   248,
   251,   256,   260,   263,   268,   272,   276,   279,   283,   288,
   292,   296,   298,   302,   305,   308,   310,   314,   316,   318,
   321,   326,   330,   333,   337,   342,   346,   351,   354,   358,
   362,   368,   373,   379,   384,   390,   395,   399,   404,   407,
   411,   414,   418,   420,   423,   425,   427,   429,   432,   437,
   441,   444,   448,   452,   454,   458,   461,   464,   466,   468,
   470,   473,   476,   478,   480,   482,   484,   486,   488,   490,
   492,   494,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   526,   530,   533,   535,
   537,   539,   541,   543,   545,   547,   553,   561,   569,   575,
   580,   583,   587,   591,   593,   596,   598,   601,   604,   608,
   611,   617,   623,   631,   633,   635,   645,   654,   662,   670,
   677,   686,   695,   703,   713,   722,   731,   739,   748,   756,
   764,   771,   773,   775,   777,   781,   783,   787,   790,   794,
   797,   800,   804,   808,   814,   818,   822,   827,   830,   832,
   838,   841,   843,   845,   847,   851,   853,   855,   857,   859,
   861,   867,   872,   874,   878,   882,   886,   891,   896,   901,
   905,   912,   918,   925,   931,   936,   940,   945,   949,   952,
   954,   958,   961,   965,   967,   969,   971,   975,   977,   979,
   981,   983,   985,   987,   989,   991,   993,   995,   997,   999,
  1001,  1003,  1005,  1007,  1013,  1015,  1019,  1021,  1025,  1027,
  1031,  1033,  1037,  1039,  1043,  1045,  1049,  1053,  1055,  1059,
  1063,  1067,  1071,  1075,  1077,  1081,  1083,  1087,  1091,  1093,
  1097,  1101,  1105,  1107,  1109,  1112,  1115,  1117,  1120,  1123,
  1125,  1128,  1131,  1133,  1135,  1137,  1139,  1141,  1144,  1147,
  1153,  1158,  1163,  1169
};

static const short yyrhs[] = {    34,
     0,    26,     0,   112,     0,   114,     0,   120,     0,   113,
     0,   121,     0,   115,     0,     5,     0,   117,     0,   116,
     0,    35,     0,     7,     0,    32,     0,    10,     0,    43,
     0,    17,     0,    24,     0,   113,     0,   113,     0,   114,
    97,    98,     0,   120,    97,    98,     0,   121,    97,    98,
     0,   123,     0,   122,     0,   110,     0,   121,   105,   110,
     0,   127,   125,   126,     0,   126,     0,   127,   125,     0,
   125,     0,   127,     0,   125,   126,     0,   127,   126,     0,
   128,     0,   125,   128,     0,   131,     0,   126,   131,     0,
    38,   121,   106,     0,   130,     0,   129,     0,    30,   121,
   106,     0,    30,   121,   107,   106,     0,   160,     0,   106,
     0,   134,     0,   133,     0,   132,   133,     0,    23,     0,
    39,     0,    40,     0,    36,     0,    48,     0,    44,     0,
    41,     0,    52,     0,     3,     0,    55,     0,   132,    11,
   110,   135,   136,   138,     0,    11,   110,   136,   138,     0,
   132,    11,   110,   135,   138,     0,    11,   110,   135,   138,
     0,   132,    11,   110,   138,     0,    11,   110,   138,     0,
    11,   110,   135,   136,   138,     0,   132,    11,   110,   136,
   138,     0,    21,   118,     0,    29,   137,     0,   119,     0,
   137,   101,   119,     0,    95,    96,     0,    95,   139,    96,
     0,   140,     0,   139,   140,     0,   156,     0,   155,     0,
   141,     0,   147,     0,   142,     0,   132,   111,   143,   106,
     0,   111,   143,   106,     0,   144,     0,   143,   101,   144,
     0,   145,     0,   145,    57,   146,     0,   110,     0,   145,
    97,    98,     0,   221,     0,   167,     0,   148,   154,     0,
   132,   111,   149,   152,     0,   111,   149,   152,     0,   111,
   149,     0,   132,    54,   149,   152,     0,    54,   149,   152,
     0,   132,    54,   149,     0,    54,   149,     0,   132,   111,
   149,     0,   110,    99,   150,   100,     0,   110,    99,   100,
     0,   149,    97,    97,     0,   151,     0,   150,   101,   151,
     0,   111,   145,     0,    50,   153,     0,   118,     0,   153,
   101,   118,     0,   106,     0,   169,     0,    44,   169,     0,
   132,   157,   152,   158,     0,   132,   157,   158,     0,   157,
   158,     0,   157,   152,   158,     0,   122,    99,   150,   100,
     0,   122,    99,   100,     0,    95,   159,   170,    96,     0,
    95,    96,     0,    95,   159,    96,     0,    95,   170,    96,
     0,    49,    99,   213,   100,   106,     0,    49,    99,   100,
   106,     0,    46,    99,   213,   100,   106,     0,    46,    99,
   100,   106,     0,   132,    33,   110,   161,   162,     0,   132,
    33,   110,   162,     0,    33,   110,   162,     0,    33,   110,
   161,   162,     0,    21,   119,     0,   161,   101,   119,     0,
    95,    96,     0,    95,   163,    96,     0,   164,     0,   163,
   164,     0,   165,     0,   166,     0,   142,     0,   148,   106,
     0,    95,   168,   101,    96,     0,    95,   168,    96,     0,
    95,    96,     0,    95,   101,    96,     0,   168,   101,   146,
     0,   146,     0,    95,   170,    96,     0,    95,    96,     0,
   170,   171,     0,   171,     0,   172,     0,   174,     0,   173,
   106,     0,   111,   143,     0,   191,     0,   176,     0,   194,
     0,   178,     0,   182,     0,   183,     0,   192,     0,   179,
     0,   176,     0,   184,     0,   195,     0,   206,     0,   193,
     0,   201,     0,   180,     0,   204,     0,   185,     0,   202,
     0,   169,     0,   177,     0,   203,     0,   205,     0,   106,
     0,   110,    63,   174,     0,   110,    63,   175,     0,   181,
   106,     0,   212,     0,   243,     0,   239,     0,   216,     0,
   242,     0,   238,     0,   223,     0,    27,    99,   221,   100,
   174,     0,    27,    99,   221,   100,   175,    18,   174,     0,
    27,    99,   221,   100,   175,    18,   175,     0,    47,    99,
   221,   100,   186,     0,    95,   187,   188,    96,     0,    95,
    96,     0,    95,   187,    96,     0,    95,   188,    96,     0,
   189,     0,   187,   189,     0,   190,     0,   188,   190,     0,
   188,   170,     0,     8,   245,    63,     0,    15,    63,     0,
    56,    99,   221,   100,   174,     0,    56,    99,   221,   100,
   175,     0,    16,   174,    56,    99,   221,   100,   106,     0,
   196,     0,   197,     0,    25,    99,   198,   106,   221,   106,
   199,   100,   174,     0,    25,    99,   198,   106,   221,   106,
   100,   174,     0,    25,    99,   106,   221,   106,   100,   174,
     0,    25,    99,   198,   106,   106,   100,   174,     0,    25,
    99,   106,   106,   100,   174,     0,    25,    99,   106,   221,
   106,   199,   100,   174,     0,    25,    99,   198,   106,   106,
   199,   100,   174,     0,    25,    99,   106,   106,   199,   100,
   174,     0,    25,    99,   198,   106,   221,   106,   199,   100,
   175,     0,    25,    99,   106,   221,   106,   199,   100,   175,
     0,    25,    99,   198,   106,   106,   199,   100,   175,     0,
    25,    99,   106,   106,   199,   100,   175,     0,    25,    99,
   198,   106,   221,   106,   100,   175,     0,    25,    99,   106,
   221,   106,   100,   175,     0,    25,    99,   198,   106,   106,
   100,   175,     0,    25,    99,   106,   106,   100,   175,     0,
   200,     0,   173,     0,   200,     0,   200,   101,   181,     0,
   181,     0,     6,   110,   106,     0,     6,   106,     0,    14,
   110,   106,     0,    14,   106,     0,    42,   106,     0,    42,
   221,   106,     0,    51,   221,   106,     0,    48,    99,   221,
   100,   169,     0,    53,   169,   207,     0,    53,   169,   209,
     0,    53,   169,   207,   209,     0,   207,   208,     0,   208,
     0,     9,    99,   151,   100,   169,     0,    22,   169,     0,
   211,     0,   217,     0,   216,     0,    99,   221,   100,     0,
   215,     0,   214,     0,    49,     0,   109,     0,   212,     0,
    37,   118,    99,   213,   100,     0,    37,   118,    99,   100,
     0,   221,     0,   213,   101,   221,     0,   210,   105,   110,
     0,    46,   105,   110,     0,   121,    97,   221,    98,     0,
   211,    97,   221,    98,     0,   121,    99,   213,   100,     0,
   121,    99,   100,     0,   210,   105,   110,    99,   213,   100,
     0,   210,   105,   110,    99,   100,     0,    46,   105,   110,
    99,   213,   100,     0,    46,   105,   110,    99,   100,     0,
    37,   114,   218,   220,     0,    37,   114,   218,     0,    37,
   113,   218,   220,     0,    37,   113,   218,     0,   218,   219,
     0,   219,     0,    97,   221,    98,     0,    97,    98,     0,
   220,    97,    98,     0,   222,     0,   226,     0,   223,     0,
   224,   225,   221,     0,   121,     0,   214,     0,   215,     0,
    85,     0,    90,     0,    88,     0,    84,     0,    57,     0,
    93,     0,    94,     0,    91,     0,    87,     0,    92,     0,
    89,     0,    86,     0,   227,     0,   227,    62,   221,    63,
   226,     0,   228,     0,   227,    71,   228,     0,   229,     0,
   228,    72,   229,     0,   230,     0,   229,    77,   230,     0,
   231,     0,   230,    79,   231,     0,   232,     0,   231,    78,
   232,     0,   233,     0,   232,    65,   233,     0,   232,    68,
   233,     0,   234,     0,   233,    66,   234,     0,   233,    31,
   112,     0,   233,    59,   234,     0,   233,    58,   234,     0,
   233,    67,   234,     0,   235,     0,   234,    82,   235,     0,
   236,     0,   235,    73,   236,     0,   235,    74,   236,     0,
   237,     0,   236,    75,   237,     0,   236,    76,   237,     0,
   236,    80,   237,     0,   238,     0,   239,     0,    73,   237,
     0,    74,   237,     0,   240,     0,    69,   237,     0,    70,
   237,     0,   241,     0,    61,   237,     0,    60,   237,     0,
   244,     0,   210,     0,   121,     0,   242,     0,   243,     0,
   241,    69,     0,   241,    70,     0,    99,   114,   220,   100,
   237,     0,    99,   221,   100,   240,     0,    99,   114,   100,
   237,     0,    99,   121,   220,   100,   240,     0,   221,     0
};

#endif

#if (YY_parse_DEBUG != 0) || defined(YY_parse_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
    55,    58,    61,    62,    66,    67,    70,    72,    73,    76,
    77,    80,    81,    82,    83,    84,    87,    88,    91,    94,
    97,   103,   109,   119,   120,   123,   126,   135,   142,   143,
   148,   149,   151,   157,   166,   167,   175,   176,   184,   192,
   193,   196,   203,   210,   211,   212,   215,   216,   224,   225,
   226,   227,   228,   229,   230,   231,   232,   233,   236,   245,
   252,   260,   268,   275,   281,   289,   300,   308,   316,   317,
   325,   326,   330,   331,   339,   340,   341,   344,   345,   348,
   355,   363,   364,   372,   373,   381,   382,   390,   391,   396,
   404,   412,   419,   425,   432,   438,   444,   449,   460,   466,
   467,   475,   476,   484,   492,   501,   502,   511,   512,   516,
   524,   532,   539,   545,   555,   563,   571,   577,   578,   579,
   582,   587,   592,   596,   603,   611,   618,   624,   635,   640,
   648,   649,   652,   653,   661,   662,   665,   668,   671,   677,
   682,   683,   691,   697,   701,   702,   705,   711,   714,   715,
   718,   721,   729,   730,   731,   732,   733,   734,   737,   738,
   739,   740,   741,   744,   745,   746,   747,   748,   749,   750,
   751,   752,   753,   754,   756,   759,   762,   765,   768,   769,
   770,   771,   772,   773,   774,   777,   785,   794,   804,   812,
   818,   819,   820,   823,   824,   832,   833,   841,   850,   855,
   862,   870,   878,   886,   889,   892,   900,   907,   914,   921,
   928,   935,   942,   952,   960,   967,   974,   981,   988,   995,
  1002,  1011,  1012,  1015,  1018,  1024,  1027,  1033,  1036,  1042,
  1045,  1046,  1054,  1062,  1069,  1075,  1081,  1090,  1096,  1099,
  1108,  1116,  1117,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
  1129,  1136,  1145,  1146,  1156,  1163,  1171,  1179,  1189,  1195,
  1196,  1205,  1213,  1222,  1232,  1240,  1247,  1255,  1264,  1270,
  1274,  1277,  1278,  1286,  1289,  1290,  1293,  1301,  1302,  1303,
  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,
  1316,  1317,  1320,  1321,  1330,  1331,  1339,  1340,  1348,  1349,
  1357,  1358,  1366,  1367,  1375,  1376,  1382,  1390,  1391,  1397,
  1403,  1409,  1415,  1424,  1425,  1434,  1435,  1441,  1449,  1450,
  1456,  1462,  1470,  1471,  1472,  1478,  1484,  1487,  1494,  1501,
  1502,  1508,  1514,  1517,  1518,  1519,  1520,  1523,  1529,  1536,
  1544,  1552,  1559,  1569
};

static const char * const yytname[] = {   "$","error","$illegal.","ABSTRACT",
"ASSERT","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","COMMENT","CONST",
"CONTINUE","DEFAULT","DO","DOUBLE","ELSE","ENUM","ERROR","EXTENDS","FINALLY",
"FINAL","FLOAT","FOR","IDENTIFIER","IF","GOTO","IMPLEMENTS","IMPORT","INSTANCEOF",
"INT","INTERFACE","LITERAL","LONG","NATIVE","NEW","PACKAGE","PRIVATE","PROTECTED",
"PUBLIC","RETURN","SHORT","STATIC","STRICTFP","SUPER","SWITCH","SYNCHRONIZED",
"THIS","THROWS","THROW","TRANSIENT","TRY","VOID","VOLATILE","WHILE","EQUALS",
"GT","LT","NT","TILDA","QUESTION_MARK","COLON","ARROW","EQEQ","GREQ","LEQ","NEQUALS",
"PLUSPLUS","MINUSMINUS","OR","AND","ADD","SUBTRACT","MULTIPLY","DIVISION","BINARYOR",
"BINARYAND","POW","MOD","GRGR","LTLT","GRGRGR","PLEQ","SBEQ","MULEQ","ANDEQ",
"OREQ","POWEQ","DIVEQ","MODEQ","DGRGR","DLRLR","TGRGRGR","OC","CC","OSQ","CSQ",
"OS","CS","COMMA","DISTO","ATR","TDT","FST","SCLN","DST","';'","Literal","Identifier",
"Type","RefType","ClassOrIntfaceType","PrimitiveType","Numbers","Integers","FloatingPoint",
"ClassType","IntfaceType","ArrKind","Name","SimpleName","QualName","CompUnit",
"ImportDecnRec","TypeDecRec","PackageDecn","ImportDecn","SingleTypeImportDecn",
"ImportDDec","TypeDec","Modifiers","Modifier","ClassDec","Super","Intfaces",
"IntfaceTypeList","ClassBody","ClassBodyDecRec","ClassBodyDec","MemberDec","FieldDecn",
"VariableDecltrs","VariableDecltr","VariableDecltrId","VariableInit","MethodDecn",
"MethodHead","MethodDecltr","FormalParamList","FormalParam","Throws","ClassTypeList",
"MethodBody","StaticInit","ConstructorDecn","ConstructorDecltr","ConstructorBody",
"ExplicitConstructorInvocation","IntfaceDecn","ExtendsIntfaces","IntfaceBody",
"IntfaceMemberDecnRec","IntfaceMemberDecn","ConstantDec","AbstractMethod","ArrInit",
"VariableInitList","Block","BlockStmts","BlockStmt","LocalVariableDecnStmt",
"LocalVariableDecn","Stmt","StmtKind","StmtWithoutTrailingSubStmt","EmptyStmt",
"LabeledStmt","LabeledStmtNoShortIf","ExprStmt","StmtExpr","IfThenStmt","IfThenElseStmt",
"IfThenElseStmtKind","SwitchStmt","SwitchBlock","SwitchBlockStmtGroups","SwitchLabels",
"SwitchBlockStmtGroup","SwitchLabel","WhileStmt","WhileStmtKind","DoStmt","ForStatement",
"ForStatementKind","ForStmt","ForStmtKind","ForInit","ForUpdate","StmtExprList",
"BreakStmt","ContinueStmt","ReturnStmt","ThrowStmt","SynchronizedStmt","TryStmt",
"Catches","CatchClause","ResEnd","Primary","PrimaryNoNewArr","ClassCreation",
"ArgLst","FieldAccess","ArrOp","MethodInvocation","NewArr","DimExprs","DimExpr",
"Dims","Expr","AssignExpr","Assign","LeftHandSide","AssignOp","ConditionExpr",
"ConditionOrExpr","ConditionAndExpr","InclusiveOrExpr","ExclusiveOrExpr","AndExpr",
"EqExpr","RtlExpr","ShiftExpr","AddExpr","MultExpr","UnaryExpr","PreIncExpr",
"PreDecExpr","UnaryExprExtra","PostfixExpr","PostIncrementExpr","PostDecrementExpr",
"CastExpr","ConstExpr",""
};
#endif

static const short yyr1[] = {     0,
   109,   110,   111,   111,   112,   112,   113,   114,   114,   115,
   115,   116,   116,   116,   116,   116,   117,   117,   118,   119,
   120,   120,   120,   121,   121,   122,   123,   124,   124,   124,
   124,   124,   124,   124,   125,   125,   126,   126,   127,   128,
   128,   129,   130,   131,   131,   131,   132,   132,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   134,   134,
   134,   134,   134,   134,   134,   134,   135,   136,   137,   137,
   138,   138,   139,   139,   140,   140,   140,   141,   141,   142,
   142,   143,   143,   144,   144,   145,   145,   146,   146,   147,
   148,   148,   148,   148,   148,   148,   148,   148,   149,   149,
   149,   150,   150,   151,   152,   153,   153,   154,   154,   155,
   156,   156,   156,   156,   157,   157,   158,   158,   158,   158,
   159,   159,   159,   159,   160,   160,   160,   160,   161,   161,
   162,   162,   163,   163,   164,   164,   165,   166,   167,   167,
   167,   167,   168,   168,   169,   169,   170,   170,   171,   171,
   172,   173,   174,   174,   174,   174,   174,   174,   175,   175,
   175,   175,   175,   176,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   177,   178,   179,   180,   181,   181,
   181,   181,   181,   181,   181,   182,   183,   184,   185,   186,
   186,   186,   186,   187,   187,   188,   188,   189,   190,   190,
   191,   192,   193,   194,   195,   196,   196,   196,   196,   196,
   196,   196,   196,   197,   197,   197,   197,   197,   197,   197,
   197,   198,   198,   199,   200,   200,   201,   201,   202,   202,
   203,   203,   204,   205,   206,   206,   206,   207,   207,   208,
   209,   210,   210,   211,   211,   211,   211,   211,   211,   211,
   212,   212,   213,   213,   214,   214,   215,   215,   216,   216,
   216,   216,   216,   216,   217,   217,   217,   217,   218,   218,
   219,   220,   220,   221,   222,   222,   223,   224,   224,   224,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   226,   226,   227,   227,   228,   228,   229,   229,
   230,   230,   231,   231,   232,   232,   232,   233,   233,   233,
   233,   233,   233,   234,   234,   235,   235,   235,   236,   236,
   236,   236,   237,   237,   237,   237,   237,   238,   239,   240,
   240,   240,   240,   241,   241,   241,   241,   242,   243,   244,
   244,   244,   244,   245
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     3,     3,     1,     1,     1,     3,     3,     1,     2,
     1,     1,     2,     2,     1,     2,     1,     2,     3,     1,
     1,     3,     4,     1,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     6,     4,
     5,     4,     4,     3,     5,     5,     2,     2,     1,     3,
     2,     3,     1,     2,     1,     1,     1,     1,     1,     4,
     3,     1,     3,     1,     3,     1,     3,     1,     1,     2,
     4,     3,     2,     4,     3,     3,     2,     3,     4,     3,
     3,     1,     3,     2,     2,     1,     3,     1,     1,     2,
     4,     3,     2,     3,     4,     3,     4,     2,     3,     3,
     5,     4,     5,     4,     5,     4,     3,     4,     2,     3,
     2,     3,     1,     2,     1,     1,     1,     2,     4,     3,
     2,     3,     3,     1,     3,     2,     2,     1,     1,     1,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     3,     2,     1,     1,
     1,     1,     1,     1,     1,     5,     7,     7,     5,     4,
     2,     3,     3,     1,     2,     1,     2,     2,     3,     2,
     5,     5,     7,     1,     1,     9,     8,     7,     7,     6,
     8,     8,     7,     9,     8,     8,     7,     8,     7,     7,
     6,     1,     1,     1,     3,     1,     3,     2,     3,     2,
     2,     3,     3,     5,     3,     3,     4,     2,     1,     5,
     2,     1,     1,     1,     3,     1,     1,     1,     1,     1,
     5,     4,     1,     3,     3,     3,     4,     4,     4,     3,
     6,     5,     6,     5,     4,     3,     4,     3,     2,     1,
     3,     2,     3,     1,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     5,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     3,     1,     3,     3,
     3,     3,     3,     1,     3,     1,     3,     3,     1,     3,
     3,     3,     1,     1,     2,     2,     1,     2,     2,     1,
     2,     2,     1,     1,     1,     1,     1,     2,     2,     5,
     4,     4,     5,     1
};

static const short yydefact[] = {     0,
    57,     0,    49,     0,     0,    52,     0,    50,    51,    55,
    54,    53,    56,    58,    45,    31,    29,    32,    35,    41,
    40,    37,     0,    47,    46,    44,     2,     0,    26,     0,
    25,    24,     0,     0,    33,    36,    38,    30,    34,     0,
     0,    48,     0,     0,     0,     0,     0,    64,     0,    42,
     0,     0,     0,     0,   127,    39,    28,     0,     0,    19,
    67,     7,    20,    69,    68,     9,    13,    15,    17,    18,
    14,    12,    16,    54,     0,    71,     0,     3,     6,     4,
     8,    11,    10,     5,     7,    25,     0,     0,    73,    77,
    79,    78,     0,    76,    75,     0,     0,    62,    60,    27,
    43,   129,   131,     0,   137,     0,     0,   133,   135,   136,
     0,   128,     0,     0,    63,     0,   126,     0,     0,   110,
     0,    97,    86,     0,    82,    84,    93,     0,     0,     0,
     0,     0,     0,     0,    72,    74,   108,    90,   109,     0,
     0,     0,   113,    65,   138,   132,   134,   130,     0,    61,
    66,   125,    70,     0,     0,     0,     0,     0,     1,     0,
     0,     0,     0,     0,   248,     0,     0,     0,     0,     0,
   146,     0,   175,   249,    26,     0,   278,   171,     0,   148,
   149,     0,   150,   154,   172,   156,   167,     0,   157,   158,
   169,   153,   165,   155,   204,   166,   170,   173,   168,   174,
   164,   334,   242,   250,   247,   246,   244,   243,   185,     0,
   184,   181,     0,   183,   180,     0,     0,    95,     0,    81,
     0,     0,    92,    21,    22,    23,   116,     0,     0,   102,
    96,     0,    98,     0,   112,   106,   105,     0,   248,   118,
     0,     0,   114,    59,   228,     0,   230,     0,   335,     0,
     0,     0,    19,     0,     0,     0,     0,     0,     0,     0,
   231,   250,   244,     0,   274,   276,   275,   293,   295,   297,
   299,   301,   303,   305,   308,   314,   316,   319,   323,   324,
   327,   330,   336,   337,   333,     0,     0,     0,     0,     0,
     0,   335,   247,   246,   328,   329,     0,     0,    86,   152,
     0,     0,   145,   147,   151,   178,     0,     0,   285,   284,
   281,   292,   289,   283,   291,   282,   288,   290,   286,   287,
     0,   338,   339,   100,     0,   101,    83,     0,    85,    89,
    88,    87,   104,   115,     0,    94,    80,    91,   111,     0,
     0,     0,   119,     0,   120,   227,   229,     0,     0,     0,
   223,   226,     0,   222,     0,     0,   268,   270,   266,     0,
   332,   331,   325,   326,     0,   335,     0,   232,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
   233,     0,     0,   235,   239,   236,     0,   245,   176,     0,
   260,     0,   253,   255,     0,   277,    99,   141,     0,   144,
     0,   103,   107,     0,     0,     0,     0,   117,     0,     0,
     0,     0,     0,     0,     0,     0,   269,   267,   265,   252,
     0,     0,     0,     0,     0,     0,   245,     0,   296,   298,
   300,   302,   304,   306,   307,   310,     0,   312,   311,   309,
   313,   315,   317,   318,   320,   321,   322,     0,     0,     0,
     0,   241,   238,   237,     0,   257,   259,     0,     0,   258,
   142,   140,     0,   124,     0,   122,     0,     0,     0,     0,
   224,     0,     0,     0,   225,     0,     0,     0,    26,   186,
     0,   154,   160,   162,   159,   163,   205,   271,   272,     0,
   251,   342,     0,     0,   341,     0,   264,     0,     0,   189,
   234,     0,   201,   254,   262,     0,   139,   143,   123,   121,
     0,   210,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   273,   340,   343,   294,   263,     0,     0,
   191,     0,     0,   194,   196,     0,   261,   203,   213,   208,
     0,   209,     0,     0,     0,     0,     0,     0,     0,   177,
   187,   344,     0,   200,   192,     0,   195,   193,   198,   197,
   240,   211,   212,   207,     0,     0,     0,     0,     0,     0,
   199,   190,   206,     0,     0,     0,     0,     0,     0,   202,
   221,     0,     0,     0,     0,     0,     0,     0,   217,   219,
     0,   220,     0,     0,     0,   188,   215,   216,   218,     0,
   214,     0,     0,     0
};

static const short yydefgoto[] = {   174,
    29,   176,    78,    79,    80,    81,    82,    83,    61,    64,
    84,   249,    31,    32,   612,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    46,    47,    65,    48,    88,
    89,    90,    91,   124,   125,   126,   329,    92,    93,   122,
   229,   230,   142,   237,   138,    94,    95,    96,   143,   241,
    26,    54,    55,   107,   108,   109,   110,   330,   411,   178,
   569,   180,   181,   182,   183,   491,   184,   185,   186,   493,
   187,   188,   189,   190,   494,   191,   510,   542,   543,   544,
   545,   192,   495,   193,   194,   496,   195,   497,   353,   480,
   481,   196,   197,   198,   199,   200,   201,   394,   395,   396,
   202,   203,   262,   402,   205,   206,   263,   208,   357,   358,
   428,   403,   265,   209,   210,   321,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   563
};

static const short yypact[] = {   221,
-32768,    37,-32768,    37,    37,-32768,    37,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   506,   632,   506,-32768,-32768,
-32768,-32768,  1135,-32768,-32768,-32768,-32768,    28,-32768,   161,
-32768,-32768,    32,    73,   632,-32768,-32768,   506,   632,    37,
    37,-32768,    37,    37,  1542,    21,     2,-32768,    37,-32768,
    22,    37,  1912,   110,-32768,-32768,   632,    28,    32,-32768,
-32768,    40,-32768,-32768,    66,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    98,    37,-32768,    37,-32768,-32768,   115,
-32768,-32768,-32768,   151,    97,   156,  3078,  2676,-32768,-32768,
-32768,-32768,    70,-32768,-32768,    -5,     2,-32768,-32768,-32768,
-32768,-32768,-32768,  3078,-32768,   173,  2722,-32768,-32768,-32768,
    37,-32768,    21,     2,-32768,   110,-32768,    37,  2104,-32768,
   188,   -16,   188,   144,-32768,    12,   -16,   212,   228,   236,
    61,    37,    37,    -5,-32768,-32768,-32768,-32768,-32768,    37,
  2170,   244,-32768,-32768,-32768,-32768,-32768,-32768,     2,-32768,
-32768,-32768,-32768,     9,    14,  2538,   204,   242,-32768,   312,
  2718,   243,   254,   261,-32768,  3017,    98,   263,  3017,  3017,
-32768,  3017,-32768,-32768,   308,    37,    65,-32768,  2236,-32768,
-32768,   269,-32768,-32768,-32768,-32768,-32768,   271,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   275,   296,   137,  2144,  2210,   194,-32768,-32768,  2276,
-32768,-32768,    44,   172,   232,   311,   301,-32768,    37,-32768,
  2942,   305,-32768,-32768,-32768,-32768,-32768,    37,   208,-32768,
   -16,   185,   -16,   244,-32768,-32768,   307,   109,   310,-32768,
  2302,  2368,-32768,-32768,-32768,   300,-32768,   304,  3050,   356,
   683,  3017,   316,   316,   317,  3017,  3017,  3017,  3017,  2604,
-32768,-32768,-32768,   314,-32768,-32768,-32768,    -6,   345,   341,
   344,   351,    -4,   205,   349,   250,   202,-32768,-32768,-32768,
-32768,    44,-32768,-32768,-32768,    37,  3017,  3017,   326,   138,
  3017,    76,-32768,-32768,-32768,-32768,   334,  2538,-32768,   335,
  2960,   122,-32768,-32768,-32768,-32768,    37,  3017,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  3017,-32768,-32768,-32768,   230,-32768,-32768,  1801,-32768,-32768,
-32768,-32768,   338,-32768,   312,-32768,-32768,-32768,-32768,    37,
   537,  1960,-32768,  2434,-32768,-32768,-32768,  3017,   343,  2734,
-32768,-32768,   331,   339,   346,  3017,   348,-32768,   348,  2844,
-32768,-32768,-32768,-32768,   100,  3072,   352,-32768,  3017,  3017,
  3017,  3017,  3017,  3017,  3017,  3017,   312,  3017,  3017,  3017,
  3017,  3017,  3017,  3017,  3017,  3017,  3017,   354,   355,   359,
-32768,   363,    98,   138,-32768,-32768,   364,-32768,-32768,   350,
-32768,   257,-32768,   366,   353,-32768,-32768,-32768,   347,-32768,
   203,-32768,-32768,   360,   265,   361,   267,-32768,  3017,   358,
   368,  2776,  1411,  2576,   371,  3001,-32768,   357,   357,-32768,
   273,   372,  3017,   123,  3001,   133,   434,   409,   345,   341,
   344,   351,    -4,   205,   205,-32768,   115,   349,   349,   349,
   349,   250,   202,   202,-32768,-32768,-32768,  2851,   380,    98,
   312,-32768,-32768,-32768,  2538,-32768,-32768,  3017,  2893,-32768,
-32768,-32768,  2900,-32768,   370,-32768,   373,   378,  2538,   384,
   339,   655,   776,   379,-32768,   389,   390,   391,   429,-32768,
   475,   479,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   400,
-32768,-32768,  3017,   434,-32768,  3017,-32768,   282,    29,-32768,
-32768,   399,-32768,-32768,-32768,   288,-32768,-32768,-32768,-32768,
   394,-32768,  2538,  2538,   406,  2538,   407,   888,   848,  3017,
  3017,  2576,  2538,-32768,-32768,-32768,-32768,-32768,  3017,   445,
-32768,    33,  1193,-32768,-32768,    98,-32768,-32768,-32768,-32768,
  2538,-32768,  2538,  2538,   410,  2793,   405,   412,   413,-32768,
-32768,-32768,   451,-32768,-32768,  2038,-32768,-32768,  2500,-32768,
-32768,-32768,-32768,-32768,  2538,   978,   414,  2795,  2576,  2576,
-32768,-32768,-32768,  2576,   415,  1003,  1017,   417,   498,-32768,
-32768,  2576,  2576,   418,  2576,   419,  1321,  2576,-32768,-32768,
  2576,-32768,  2576,  2576,   425,-32768,-32768,-32768,-32768,  2576,
-32768,   526,   527,-32768
};

static const short yypgoto[] = {-32768,
    -2,   -28,   155,   -34,  -152,-32768,-32768,-32768,  -134,     0,
-32768,   245,    62,-32768,-32768,   510,    64,-32768,    54,-32768,
-32768,   196,   127,     8,-32768,   476,    -3,-32768,   -25,-32768,
   449,-32768,   -21,   -71,   321,   315,  -315,-32768,    30,    86,
   332,  -319,   -76,-32768,-32768,-32768,-32768,   457,  -115,-32768,
-32768,   494,    87,-32768,   448,-32768,-32768,-32768,-32768,   -73,
  -105,  -175,-32768,  -246,  -154,   328,  -394,-32768,-32768,-32768,
-32768,  -236,-32768,-32768,-32768,-32768,-32768,-32768,    17,    20,
  -377,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    27,  -454,
  -244,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   166,   171,
-32768,-32768,   240,  -318,  1228,  1598,   416,-32768,   322,  -101,
   -85,  1593,-32768,  1368,-32768,-32768,    60,-32768,   198,   199,
   197,   206,   201,    15,   -66,   210,    18,  -158,   556,   732,
  -383,   849,   940,  1220,-32768,-32768
};


#define	YYLAST		3177


static const short yytable[] = {    28,
   120,   250,    33,   304,   351,   236,   354,   254,    60,    63,
   295,   296,   410,   179,   352,   412,    77,    63,   235,   139,
    98,    99,   415,   417,    77,   255,   243,   525,   527,   492,
    42,   105,   115,   140,    27,   242,   539,    58,    59,    27,
   539,   431,    97,   540,   140,   218,   100,   540,    43,    44,
   223,   102,    52,   505,   114,   369,    44,   234,   133,    77,
   375,   232,    27,   376,   370,    66,   304,    67,   221,    36,
    68,   144,   121,   555,   123,   133,    63,    69,    77,    35,
   217,    39,   106,    63,    70,   105,    27,   150,   151,   141,
    -7,    36,    71,   290,    42,    72,    45,   361,   362,   363,
   364,    57,   228,    73,   300,    60,    86,   365,   222,   149,
   148,    42,   322,   323,   245,    45,   175,   153,   339,   247,
   536,   585,    45,   244,   541,   253,    53,   101,   565,   121,
   123,   594,   596,  -335,  -335,   344,   106,   492,   175,   508,
   112,   512,   605,   399,    49,   117,   392,    27,    86,    86,
   516,   246,   248,   175,   336,   159,   338,   518,   160,   393,
   227,   301,   127,   302,   119,   570,   118,   162,   304,    49,
   165,    87,   348,   299,   302,   137,   175,    49,    56,   104,
    49,   256,   257,   352,   492,   492,   485,   228,   570,   492,
   169,   170,   119,   130,   258,   259,   432,   492,   492,   433,
   492,    49,   152,   492,    53,   413,   492,   341,   492,   492,
   111,   128,    37,   286,    87,   492,   299,   231,   233,   500,
   260,   401,   503,     1,   447,   299,   455,   456,   457,   500,
    37,     2,   504,   104,    37,   377,  -179,  -179,   175,   175,
  -336,  -336,  -179,     3,   219,   352,   352,   129,    30,   220,
     4,    34,    37,     5,   131,   427,     6,   427,     7,     8,
     9,    10,   378,   379,    11,    49,    50,    51,    12,   490,
   380,   381,    13,   429,   502,    14,   385,   386,   145,   434,
   436,   387,   351,   388,   354,   219,   216,    62,    62,    85,
   337,   352,   352,  -182,  -182,   175,    62,    85,   472,  -182,
  -337,  -337,   251,   473,   404,    60,   228,   334,   335,   224,
   513,   448,   449,   450,   451,    66,    66,    67,    67,   462,
    68,    68,   383,   384,   522,   225,    15,    69,    69,   407,
   335,    85,    85,   226,    70,    70,    27,    27,   141,   352,
   252,   175,    71,    71,   535,    72,    72,   286,    85,   352,
   352,    85,   287,    73,    73,    62,   467,   468,   204,   288,
   352,   291,    62,   177,   475,   468,   477,   468,   549,   550,
   298,   552,   501,   468,   305,    85,   306,   399,   561,   307,
   204,   538,   468,    27,    62,   177,   511,   547,   468,   444,
   445,   159,   308,   304,   160,   204,   572,   326,   573,   574,
   453,   454,   332,   162,    62,   346,   165,   340,   342,   347,
   324,   349,   356,   292,   292,   360,   371,   372,   204,   368,
   583,   489,   373,   177,   490,   513,   169,   170,   374,   522,
   382,   391,   228,   398,   222,   219,   422,   549,   550,   423,
   552,   419,   471,   561,   426,   424,   572,   466,   573,   574,
   470,   437,   458,   500,   459,   583,   172,   479,   460,    27,
    85,   461,   175,   465,   469,   474,   476,   159,   498,   499,
   160,   506,   571,   482,   509,   519,   175,   521,   520,   162,
   204,   204,   165,   523,   528,   177,   177,   529,   530,   531,
   204,   532,   533,   256,   257,   177,  -161,   534,   546,   548,
   292,   292,   292,   292,   366,   551,   553,   564,     1,   575,
   578,   579,   580,   581,   592,   598,     2,   601,   603,   586,
   175,   175,   597,   175,   610,   613,   614,    38,     3,   489,
   175,   446,   260,   113,   207,     4,   136,   204,     5,   327,
   175,     6,   333,   134,     8,     9,    10,   325,   175,    11,
   175,   175,   116,    12,   147,   557,   207,    13,   566,   463,
    14,   567,    27,   175,   464,   537,   175,   439,   441,   440,
   159,   207,   175,   160,   443,   359,   489,   489,   442,    85,
     0,   489,   162,   204,    62,   165,     0,     0,   177,   489,
   489,   452,   489,     0,   207,   489,   256,   257,   489,     0,
   489,   489,     0,     0,     0,   169,   170,   489,     0,   258,
   259,    15,     0,     0,   292,   292,   292,   292,   292,   292,
   292,    85,   292,   292,   292,   292,   292,   292,   292,   292,
   292,   292,     0,     0,     1,   260,   414,     0,     0,     0,
     0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     3,     0,   207,   207,     0,   204,
     0,     0,   204,   204,     5,     0,   207,     6,     0,     0,
     8,     9,    10,     0,   211,    11,     0,   292,     0,    12,
    27,   292,     0,    13,     0,     0,    14,    66,   159,    67,
     0,   160,    68,     0,     0,     0,   211,     0,     0,    69,
   162,     0,     0,   165,   204,    85,    70,     0,    27,     0,
     0,   211,     0,   207,    71,     0,   159,    72,   204,   160,
     0,   204,   204,   169,   170,    73,     0,     0,   162,     0,
     0,   165,     0,     0,   211,     0,     0,    15,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   292,   292,     0,
   292,   169,   170,   172,   524,     0,     0,     0,     0,   207,
     0,     0,   204,   204,     0,   204,     0,   204,   204,     0,
     0,   204,   204,   177,     0,     0,     0,     0,     0,     0,
     0,   172,   204,     0,     0,     0,     0,   177,   350,     0,
   204,     0,   204,   204,     0,     0,   211,   211,     0,     0,
     0,    27,     0,     0,     0,   204,   211,     0,   204,   159,
   177,     0,   160,   177,   204,   204,     0,     0,   204,   204,
     0,   162,     0,   204,   165,   204,   204,     0,     0,     0,
     0,   204,   204,     0,   204,   207,   204,   204,   207,   207,
   204,     0,   204,   204,   169,   170,     0,     0,     0,   204,
   212,     0,    66,   211,    67,     0,     0,    68,     0,   560,
     0,     0,     0,     0,    69,     0,     0,     0,     0,     0,
     0,    70,   212,    27,   172,   526,     0,     0,     0,    71,
   207,   159,    72,     0,   160,     0,     0,   212,     0,     0,
    73,     0,     0,   162,   207,     0,   165,   207,   207,   211,
     0,     0,     0,     0,     0,     0,   589,   590,     0,     0,
   212,   591,     0,    27,     0,     0,   169,   170,     0,   599,
   600,   159,   602,     0,   160,   606,     0,     0,   607,     0,
   608,   609,     0,   162,     0,     0,   165,   611,   207,   207,
     0,   207,     0,   207,   207,     0,   172,   207,   207,     0,
     0,     0,     0,   556,     0,     0,   169,   170,   207,     0,
     0,     0,     0,     0,     0,     0,   207,   213,   207,   207,
     0,     0,   212,   212,     0,   211,     0,     0,   211,   211,
     0,   207,   212,     0,   207,     0,   172,   554,     0,   213,
   207,   207,     0,     0,   207,   207,     0,     0,     0,   207,
     0,   207,   207,    27,   213,     0,     0,   207,   207,     0,
   207,   159,   207,   207,   160,     0,   207,     0,   207,   207,
   211,     0,     0,   162,     0,   207,   165,   213,    27,   212,
     0,     0,     0,     0,   211,     0,   159,   211,   211,   160,
     0,     0,    27,     0,     0,     0,   169,   170,   162,     0,
   159,   165,     0,   160,     0,     0,     0,     0,   214,     0,
     0,     0,   162,     0,     0,   165,     0,     0,     0,     0,
     0,   169,   170,     0,     0,   212,   172,   584,   211,   211,
   214,   211,     0,   211,   211,   169,   170,   211,   211,   213,
   213,     0,     0,     0,     0,   214,     0,     0,   211,   213,
     0,   172,   593,     0,     0,     0,   211,     0,   211,   211,
     0,     0,     0,     0,     0,   172,   595,     0,   214,     0,
     0,   211,     0,     0,   211,     0,     0,     0,     0,     0,
   211,   211,     0,     0,   211,   211,     0,     1,     0,   211,
     0,   211,   211,     0,     0,    40,   213,   211,   211,     0,
   211,   212,   211,   211,   212,   212,   211,     3,   211,   211,
     0,     0,     0,     0,     0,   211,     0,    41,     0,     0,
     6,     0,     0,     8,     9,    10,     0,     0,    11,     0,
   214,   214,    12,     0,     0,     0,    13,     0,     0,    14,
   214,     0,   213,     0,     0,     0,   212,    66,   154,    67,
   539,     0,    68,     0,     0,     0,   155,   540,   156,    69,
   212,     0,     0,   212,   212,     0,    70,   157,    27,   158,
     0,     0,     0,     0,    71,     0,   159,    72,     0,   160,
     0,     0,     0,     0,   161,    73,     0,   214,   162,   163,
   164,   165,     0,   166,     0,   167,     0,     0,   168,     0,
     0,     0,     0,     0,   212,   212,     0,   212,     0,   212,
   212,   169,   170,   212,   212,     0,     0,     0,   213,     0,
     0,   213,   213,     0,   212,     0,     0,     0,     0,     0,
     0,     0,   212,   214,   212,   212,     0,   119,   568,     0,
     0,   172,     0,     0,     0,     0,     0,   212,   173,     0,
   212,     0,     0,     0,     0,     0,   212,   212,     0,     0,
   212,   212,     0,   213,     0,   212,     0,   212,   212,     0,
     0,     0,     0,   212,   212,     0,   212,   213,   212,   212,
   213,   213,   212,     0,   212,   212,     0,     0,   215,     0,
     0,   212,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,     0,     0,   159,     0,     0,   160,     0,   214,
   215,     0,   214,   214,     0,     0,   162,     0,     0,   165,
     0,   213,   213,     0,   213,   215,   213,   213,     0,     0,
   213,   213,     0,     0,     0,     0,     0,     0,     0,   169,
   170,   213,     0,     0,     0,     0,   293,   293,   215,   213,
     0,   213,   213,     0,   214,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   213,     0,     0,   213,   214,   172,
   604,   214,   214,   213,   213,     0,     0,   213,   213,     0,
     0,     0,   213,     0,   213,   213,    27,     0,     0,     0,
   213,   213,     0,   213,   159,   213,   213,   160,     0,   213,
     0,   213,   213,     0,     0,     0,   162,     0,   213,   165,
   215,   215,   214,   214,     0,   214,     0,   214,   214,     0,
   215,   214,   214,     0,     0,     0,     0,     0,     0,   169,
   170,     0,   214,   293,   293,   293,   293,     0,     0,     0,
   214,     0,   214,   214,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   214,     0,     0,   214,   172,
     0,     0,     0,     0,   214,   214,     0,   215,   214,   214,
     0,     0,     0,   214,     0,   214,   214,     0,   266,     0,
     0,   214,   214,   266,   214,     0,   214,   214,     0,   266,
   214,     0,   214,   214,     1,     0,    66,     0,    67,   214,
     0,    68,     0,     0,     0,     0,     0,     0,    69,     0,
     0,     0,     0,   215,     3,    70,     0,    27,     0,     0,
     0,     0,     0,    71,     0,     0,    72,     6,     0,     0,
     8,     9,    10,     0,    73,    74,     0,     0,   266,    12,
     0,     0,     0,    13,     0,    75,    14,   293,   293,   293,
   293,   293,   293,   293,     0,   293,   293,   293,   293,   293,
   293,   293,   293,   293,   293,     0,     0,     0,     0,   266,
     0,     0,     0,     0,     0,     0,     0,   266,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    76,     0,   215,
     0,     0,   215,   215,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   266,   266,     0,     0,   266,     0,
   293,     0,     0,     0,   293,     0,     0,     0,   266,   266,
     0,     0,     0,     0,     0,   266,     0,     0,     0,     0,
     0,     0,     0,     0,   215,     0,     0,     0,   266,     0,
     0,     0,     0,     0,     0,   266,     0,     0,   215,     0,
     0,   215,   215,     0,     0,     0,     0,     0,   266,   266,
     0,     0,     0,     0,     0,   266,     0,   266,     0,     0,
     0,     0,     0,   266,     0,     0,     0,   266,     0,     0,
   293,   293,     0,   293,     0,     0,   266,     0,     0,     0,
     0,     0,   215,   215,     0,   215,     0,   215,   215,     0,
     0,   215,   215,   264,     0,     0,     0,     0,   289,     0,
     0,     0,   215,     0,   297,     0,   294,   294,     0,     0,
   215,     0,   215,   215,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   215,   266,     0,   215,   266,
     0,     0,     0,   266,   215,   215,     0,     0,   215,   215,
     0,     0,   266,   215,     0,   215,   215,     0,     0,     0,
     0,   215,   215,   331,   215,     0,   215,   215,     0,     0,
   215,     0,   215,   215,     0,   266,    27,     0,     0,   215,
     0,     0,     0,     0,   159,   266,   266,   160,     0,     0,
   266,     0,     0,     0,   355,     0,   162,     0,     0,   165,
     0,     0,   367,   294,   294,   294,   294,     0,     0,     0,
   256,   257,     0,     0,     0,     0,     0,     0,     0,   169,
   170,     0,     0,   258,   259,     0,     0,     0,     0,   389,
   390,     0,     0,   397,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   400,     0,   328,   408,   266,   266,   260,
   405,   409,     0,     0,     0,     0,   266,     0,     0,     0,
     0,     0,     0,   406,     1,     0,    66,     0,    67,     0,
   331,    68,     0,   266,     0,     0,     0,     0,    69,     0,
     0,     0,     0,     0,     3,    70,     0,    27,     0,     0,
   400,     0,   421,    71,     0,   266,    72,     6,   425,     0,
     8,     9,    10,     0,    73,    11,     0,     0,     0,    12,
     0,   438,     0,    13,     0,    75,    14,   294,   294,   294,
   294,   294,   294,   294,     0,   294,   294,   294,   294,   294,
   294,   294,   294,   294,   294,    27,     0,     0,     0,     0,
     0,     0,     0,   159,     0,     0,   160,     0,     0,     0,
     0,     0,     0,     0,     0,   162,     0,   103,   165,     0,
     0,   478,     0,     0,   484,     0,     0,     0,   425,   256,
   257,     0,     0,     0,     0,     0,     0,   400,   169,   170,
   294,     0,   258,   259,   294,     0,     0,     0,     0,     0,
     0,     0,    66,   154,    67,   539,     0,    68,     0,     0,
     0,   155,   540,   156,    69,     0,     0,     0,   260,   416,
   514,    70,   157,    27,   158,   331,     0,     0,     0,    71,
     0,   159,    72,     0,   160,     0,     0,     0,     0,   161,
    73,     0,     0,   162,   163,   164,   165,     0,   166,     0,
   167,     0,     0,   168,     0,     0,     0,     0,     0,     0,
   294,   294,     0,   294,     0,     0,   169,   170,    66,   154,
    67,     0,     0,    68,     0,     0,     0,   155,     0,   156,
    69,     0,   558,   559,     0,     0,     0,    70,   157,    27,
   158,   562,   119,   582,     0,    71,   172,   159,    72,     0,
   160,     0,     0,   173,     0,   161,    73,     0,   577,   162,
   163,   164,   165,     0,   166,     0,   167,     0,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   588,     0,   169,   170,    66,   154,    67,     0,     0,    68,
     0,     0,     0,   155,     0,   156,    69,     0,     0,     0,
     0,     0,     0,    70,   157,    27,   158,     0,   119,   171,
  -279,    71,   172,   159,    72,     0,   160,     0,     0,   173,
     0,   161,    73,     0,     0,   238,   163,   164,   239,     0,
   166,     0,   167,     0,     0,   168,     0,  -279,  -279,  -279,
  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,   169,   170,
    66,   154,    67,     0,     0,    68,     0,     0,     0,   155,
     0,   156,    69,     0,     0,     0,     0,     0,     0,    70,
   157,    27,   158,     0,   119,   240,  -280,    71,   172,   159,
    72,     0,   160,     0,     0,   173,     0,   161,    73,     0,
     0,   162,   163,   164,   165,     0,   166,     0,   167,     0,
     0,   168,     0,  -280,  -280,  -280,  -280,  -280,  -280,  -280,
  -280,  -280,  -280,  -280,   169,   170,    66,   154,    67,     0,
     0,    68,     0,     0,     0,   155,     0,   156,    69,     0,
     0,     0,     0,     0,     0,    70,   157,    27,   158,     0,
   119,   303,   309,    71,   172,   159,    72,     0,   160,     0,
     0,   173,     0,   161,    73,     0,     0,   162,   163,   164,
   165,     0,   166,     0,   167,     0,     0,   168,     0,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   169,   170,    66,   154,    67,     0,     0,    68,     0,     0,
     0,   155,     0,   156,    69,     0,     0,     0,     0,     0,
     0,    70,   157,    27,   158,     0,   119,   343,     0,    71,
   172,   159,    72,     0,   160,     0,     0,   173,     0,   161,
    73,     0,     0,   162,   163,   164,   165,     0,   166,     0,
   167,     0,     0,   168,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   169,   170,    66,   154,
    67,     0,     0,    68,     0,     0,     0,   155,     0,   156,
    69,     0,     0,     0,     0,     0,     0,    70,   157,    27,
   158,     0,   119,   345,     0,    71,   172,   159,    72,     0,
   160,     0,     0,   173,     0,   161,    73,     0,     0,   162,
   163,   164,   165,     0,   166,     0,   167,     0,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   169,   170,    66,   154,    67,     0,     0,    68,
     0,     0,     0,   155,     0,   156,    69,     0,     0,     0,
     0,     0,     0,    70,   157,    27,   158,     0,   119,   418,
     0,    71,   172,   159,    72,     0,   160,     0,     0,   173,
     0,   161,    73,   154,     0,   162,   163,   164,   165,     0,
   166,   155,   167,   156,     0,   168,     0,     0,     0,     0,
     0,     0,   157,    27,   158,     0,     0,     0,   169,   170,
     0,   159,     0,     0,   160,     0,     0,     0,     0,   161,
     0,   154,     0,   162,   163,   164,   165,     0,   166,   155,
   167,   156,     0,   168,   119,     0,     0,     0,   172,     0,
   486,    27,   487,     0,     0,   173,   169,   170,    66,   159,
    67,     0,   160,    68,     0,     0,     0,   161,     0,     0,
    69,   162,   163,   164,   165,     0,   166,    70,   167,    27,
     0,   488,   119,     0,     0,    71,   172,   159,    72,     0,
   160,     0,     0,   173,   169,   170,    73,     0,     0,   162,
     0,     0,   165,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   256,   257,     0,     0,     0,     0,     0,
   119,     0,   169,   170,   172,     0,   258,   259,     1,     0,
    66,   173,    67,     0,     0,    68,     0,     0,     0,     0,
     0,     0,    69,     0,     0,     0,     0,     0,     3,    70,
     0,    27,   260,     0,     0,     0,     0,    71,     0,     0,
    72,     6,     0,     0,     8,     9,    10,     0,    73,    74,
     0,     0,     0,    12,     1,     0,    66,    13,    67,    75,
    14,    68,     0,     0,     0,     0,     0,     0,    69,     0,
     0,     0,     0,    27,     3,    70,     0,    27,     0,     0,
     0,   159,     0,    71,   160,     0,    72,     6,     0,    27,
     8,     9,    10,   162,    73,    11,   165,   159,     0,    12,
   160,   135,     0,    13,     0,    75,    14,   256,   257,   162,
     0,     0,   165,     0,     0,     0,   169,   170,     0,     0,
   258,   259,     0,   256,   257,     0,     0,     0,     0,     0,
     0,    27,   169,   170,     0,     0,   258,   259,     0,   159,
     0,     0,   160,     0,     0,     0,   260,   146,    27,     0,
    27,   162,     0,   261,   165,     0,   159,     0,   159,   160,
     0,   160,   260,     0,     0,   256,   257,     0,   162,   420,
   162,   165,     0,   165,   169,   170,     0,     0,   258,   259,
     0,     0,   256,   257,   256,   257,     0,     0,     0,     0,
     0,   169,   170,   169,   170,   258,   259,   258,   259,    27,
     0,     0,     0,     0,   260,     0,    27,   159,     0,     0,
   160,   483,     0,     0,   159,     0,     0,   160,     0,   162,
     0,   260,   165,   260,     0,     0,   162,     0,   576,   165,
   587,     0,     0,   256,   257,     0,     0,     0,     0,     0,
   256,   257,   169,   170,     0,     0,   258,   259,    27,   169,
   170,     0,     0,   258,   259,    27,   159,     0,     0,   160,
     0,     0,     0,   159,     0,     0,   160,     0,   162,     0,
     0,   165,   260,   430,     0,   162,     0,     0,   165,   260,
   507,     0,   256,   257,     0,     0,     0,     0,     0,   256,
   257,   169,   170,     0,     0,   258,   259,    27,   169,   170,
     0,     0,   258,   259,     0,   159,     0,     0,   160,     0,
     0,     0,     0,     0,     0,    27,     0,   162,     0,     0,
   165,   260,   515,   159,   328,   517,   160,     0,   260,     0,
     0,   256,   257,     0,     0,   162,     0,     0,   165,     0,
   169,   170,     0,     0,   258,   259,     0,     0,     0,   256,
   257,     0,     0,     0,     0,     0,    27,     0,   169,   170,
     0,     0,   258,   259,   159,     0,   328,   160,     0,     0,
   260,     0,    27,     0,     0,     0,   162,     0,     0,   165,
   159,     0,     0,   160,     0,     0,     0,   226,   260,     0,
   256,   257,   162,     0,     0,   165,     0,     0,     0,   169,
   170,     0,     0,   258,   259,     0,   256,   257,     0,     0,
     1,     0,    66,     0,    67,   169,   170,    68,     0,   258,
   259,     0,     0,     0,    69,     0,     0,     0,   499,   260,
     3,    70,     0,    27,     0,     0,  -278,     0,     0,    71,
     0,     0,    72,     6,     0,   260,     8,     9,    10,     0,
    73,    11,     0,     0,     0,    12,     0,     0,  -278,    13,
     0,   132,    14,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
  -278,  -278,  -278,  -278,     0,     0,   348,     0,   302,     0,
     0,     0,     0,     0,    49,  -278,  -278,  -278,  -278,  -278,
  -278,  -278,  -278,  -278,  -278,  -278,     0,     0,   435,     0,
   302,     0,     0,     0,     0,     0,    49
};

static const short yycheck[] = {     2,
    74,   156,     5,   179,   251,   140,   251,   160,    43,    44,
   169,   170,   328,   119,   251,   335,    45,    52,   134,    93,
    46,    47,   341,   342,    53,   160,   142,   482,   483,   424,
    23,    53,    58,    50,    26,   141,     8,    40,    41,    26,
     8,   360,    46,    15,    50,   122,    49,    15,    21,    29,
   127,    52,    21,   437,    58,    62,    29,   134,    87,    88,
    65,   133,    26,    68,    71,     5,   242,     7,    57,    16,
    10,    97,    75,   528,    77,   104,   111,    17,   107,    16,
    97,    18,    53,   118,    24,   107,    26,   113,   114,    95,
    26,    38,    32,   167,    87,    35,    95,   256,   257,   258,
   259,    38,   131,    43,   176,   140,    45,   260,    97,   113,
   111,   104,    69,    70,   106,    95,   119,   118,   234,   106,
   504,   576,    95,   149,    96,   160,    95,   106,    96,   132,
   133,   586,   587,    69,    70,   241,   107,   532,   141,   458,
    54,   461,   597,   298,   105,    59,     9,    26,    87,    88,
   469,   154,   155,   156,   231,    34,   233,   473,    37,    22,
   100,    97,    77,    99,    95,   543,   101,    46,   344,   105,
    49,    45,    97,   176,    99,   106,   179,   105,   106,    53,
   105,    60,    61,   420,   579,   580,   423,   216,   566,   584,
    69,    70,    95,    97,    73,    74,    97,   592,   593,   100,
   595,   105,   116,   598,    95,   340,   601,    99,   603,   604,
   101,    97,    17,   105,    88,   610,   219,   132,   133,    97,
    99,   100,   100,     3,   377,   228,   385,   386,   387,    97,
    35,    11,   100,   107,    39,    31,   100,   101,   241,   242,
    69,    70,   106,    23,   101,   482,   483,    97,     4,   106,
    30,     7,    57,    33,    99,   357,    36,   359,    38,    39,
    40,    41,    58,    59,    44,   105,   106,   107,    48,   424,
    66,    67,    52,   359,   433,    55,    75,    76,   106,   365,
   366,    80,   529,   286,   529,   101,    99,    43,    44,    45,
   106,   528,   529,   100,   101,   298,    52,    53,    96,   106,
    69,    70,    99,   101,   307,   340,   335,   100,   101,    98,
   465,   378,   379,   380,   381,     5,     5,     7,     7,   393,
    10,    10,    73,    74,   479,    98,   106,    17,    17,   100,
   101,    87,    88,    98,    24,    24,    26,    26,    95,   576,
    99,   344,    32,    32,   503,    35,    35,   105,   104,   586,
   587,   107,    99,    43,    43,   111,   100,   101,   119,    99,
   597,    99,   118,   119,   100,   101,   100,   101,   523,   524,
    63,   526,   100,   101,   106,   131,   106,   532,   533,   105,
   141,   100,   101,    26,   140,   141,   460,   100,   101,   375,
   376,    34,    97,   569,    37,   156,   551,    97,   553,   554,
   383,   384,    98,    46,   160,   106,    49,   101,    99,   106,
   100,    56,    97,   169,   170,    99,    72,    77,   179,   106,
   575,   424,    79,   179,   579,   580,    69,    70,    78,   584,
    82,   106,   461,   100,    97,   101,   106,   592,   593,   101,
   595,    99,    96,   598,    97,   100,   601,    98,   603,   604,
    98,   100,    99,    97,   100,   610,    99,   100,   100,    26,
   216,    99,   465,   100,    99,   106,   106,    34,    98,    98,
    37,    63,   546,   106,    95,   106,   479,   100,   106,    46,
   241,   242,    49,   100,   106,   241,   242,    99,    99,    99,
   251,    63,    18,    60,    61,   251,    18,    98,   100,   106,
   256,   257,   258,   259,   260,   100,   100,    63,     3,   100,
   106,   100,   100,    63,   100,    18,    11,   100,   100,   106,
   523,   524,   106,   526,   100,     0,     0,    18,    23,   532,
   533,   377,    99,    58,   119,    30,    88,   298,    33,   219,
   543,    36,   228,    87,    39,    40,    41,   216,   551,    44,
   553,   554,    59,    48,   107,   529,   141,    52,   542,   394,
    55,   542,    26,   566,   394,   506,   569,   370,   372,   371,
    34,   156,   575,    37,   374,   254,   579,   580,   373,   335,
    -1,   584,    46,   344,   340,    49,    -1,    -1,   344,   592,
   593,   382,   595,    -1,   179,   598,    60,    61,   601,    -1,
   603,   604,    -1,    -1,    -1,    69,    70,   610,    -1,    73,
    74,   106,    -1,    -1,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,   387,    -1,    -1,     3,    99,   100,    -1,    -1,    -1,
    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    23,    -1,   241,   242,    -1,   420,
    -1,    -1,   423,   424,    33,    -1,   251,    36,    -1,    -1,
    39,    40,    41,    -1,   119,    44,    -1,   433,    -1,    48,
    26,   437,    -1,    52,    -1,    -1,    55,     5,    34,     7,
    -1,    37,    10,    -1,    -1,    -1,   141,    -1,    -1,    17,
    46,    -1,    -1,    49,   465,   461,    24,    -1,    26,    -1,
    -1,   156,    -1,   298,    32,    -1,    34,    35,   479,    37,
    -1,   482,   483,    69,    70,    43,    -1,    -1,    46,    -1,
    -1,    49,    -1,    -1,   179,    -1,    -1,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,   504,    -1,
   506,    69,    70,    99,   100,    -1,    -1,    -1,    -1,   344,
    -1,    -1,   523,   524,    -1,   526,    -1,   528,   529,    -1,
    -1,   532,   533,   529,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   543,    -1,    -1,    -1,    -1,   543,   106,    -1,
   551,    -1,   553,   554,    -1,    -1,   241,   242,    -1,    -1,
    -1,    26,    -1,    -1,    -1,   566,   251,    -1,   569,    34,
   566,    -1,    37,   569,   575,   576,    -1,    -1,   579,   580,
    -1,    46,    -1,   584,    49,   586,   587,    -1,    -1,    -1,
    -1,   592,   593,    -1,   595,   420,   597,   598,   423,   424,
   601,    -1,   603,   604,    69,    70,    -1,    -1,    -1,   610,
   119,    -1,     5,   298,     7,    -1,    -1,    10,    -1,   532,
    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    24,   141,    26,    99,   100,    -1,    -1,    -1,    32,
   465,    34,    35,    -1,    37,    -1,    -1,   156,    -1,    -1,
    43,    -1,    -1,    46,   479,    -1,    49,   482,   483,   344,
    -1,    -1,    -1,    -1,    -1,    -1,   579,   580,    -1,    -1,
   179,   584,    -1,    26,    -1,    -1,    69,    70,    -1,   592,
   593,    34,   595,    -1,    37,   598,    -1,    -1,   601,    -1,
   603,   604,    -1,    46,    -1,    -1,    49,   610,   523,   524,
    -1,   526,    -1,   528,   529,    -1,    99,   532,   533,    -1,
    -1,    -1,    -1,   106,    -1,    -1,    69,    70,   543,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   551,   119,   553,   554,
    -1,    -1,   241,   242,    -1,   420,    -1,    -1,   423,   424,
    -1,   566,   251,    -1,   569,    -1,    99,   100,    -1,   141,
   575,   576,    -1,    -1,   579,   580,    -1,    -1,    -1,   584,
    -1,   586,   587,    26,   156,    -1,    -1,   592,   593,    -1,
   595,    34,   597,   598,    37,    -1,   601,    -1,   603,   604,
   465,    -1,    -1,    46,    -1,   610,    49,   179,    26,   298,
    -1,    -1,    -1,    -1,   479,    -1,    34,   482,   483,    37,
    -1,    -1,    26,    -1,    -1,    -1,    69,    70,    46,    -1,
    34,    49,    -1,    37,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    -1,    69,    70,    -1,    -1,   344,    99,   100,   523,   524,
   141,   526,    -1,   528,   529,    69,    70,   532,   533,   241,
   242,    -1,    -1,    -1,    -1,   156,    -1,    -1,   543,   251,
    -1,    99,   100,    -1,    -1,    -1,   551,    -1,   553,   554,
    -1,    -1,    -1,    -1,    -1,    99,   100,    -1,   179,    -1,
    -1,   566,    -1,    -1,   569,    -1,    -1,    -1,    -1,    -1,
   575,   576,    -1,    -1,   579,   580,    -1,     3,    -1,   584,
    -1,   586,   587,    -1,    -1,    11,   298,   592,   593,    -1,
   595,   420,   597,   598,   423,   424,   601,    23,   603,   604,
    -1,    -1,    -1,    -1,    -1,   610,    -1,    33,    -1,    -1,
    36,    -1,    -1,    39,    40,    41,    -1,    -1,    44,    -1,
   241,   242,    48,    -1,    -1,    -1,    52,    -1,    -1,    55,
   251,    -1,   344,    -1,    -1,    -1,   465,     5,     6,     7,
     8,    -1,    10,    -1,    -1,    -1,    14,    15,    16,    17,
   479,    -1,    -1,   482,   483,    -1,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,    37,
    -1,    -1,    -1,    -1,    42,    43,    -1,   298,    46,    47,
    48,    49,    -1,    51,    -1,    53,    -1,    -1,    56,    -1,
    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,   528,
   529,    69,    70,   532,   533,    -1,    -1,    -1,   420,    -1,
    -1,   423,   424,    -1,   543,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   551,   344,   553,   554,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,   566,   106,    -1,
   569,    -1,    -1,    -1,    -1,    -1,   575,   576,    -1,    -1,
   579,   580,    -1,   465,    -1,   584,    -1,   586,   587,    -1,
    -1,    -1,    -1,   592,   593,    -1,   595,   479,   597,   598,
   482,   483,   601,    -1,   603,   604,    -1,    -1,   119,    -1,
    -1,   610,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,   420,
   141,    -1,   423,   424,    -1,    -1,    46,    -1,    -1,    49,
    -1,   523,   524,    -1,   526,   156,   528,   529,    -1,    -1,
   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
    70,   543,    -1,    -1,    -1,    -1,   169,   170,   179,   551,
    -1,   553,   554,    -1,   465,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   566,    -1,    -1,   569,   479,    99,
   100,   482,   483,   575,   576,    -1,    -1,   579,   580,    -1,
    -1,    -1,   584,    -1,   586,   587,    26,    -1,    -1,    -1,
   592,   593,    -1,   595,    34,   597,   598,    37,    -1,   601,
    -1,   603,   604,    -1,    -1,    -1,    46,    -1,   610,    49,
   241,   242,   523,   524,    -1,   526,    -1,   528,   529,    -1,
   251,   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    69,
    70,    -1,   543,   256,   257,   258,   259,    -1,    -1,    -1,
   551,    -1,   553,   554,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,   569,    99,
    -1,    -1,    -1,    -1,   575,   576,    -1,   298,   579,   580,
    -1,    -1,    -1,   584,    -1,   586,   587,    -1,   161,    -1,
    -1,   592,   593,   166,   595,    -1,   597,   598,    -1,   172,
   601,    -1,   603,   604,     3,    -1,     5,    -1,     7,   610,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    -1,    -1,   344,    23,    24,    -1,    26,    -1,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    -1,
    39,    40,    41,    -1,    43,    44,    -1,    -1,   221,    48,
    -1,    -1,    -1,    52,    -1,    54,    55,   370,   371,   372,
   373,   374,   375,   376,    -1,   378,   379,   380,   381,   382,
   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,   252,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,   420,
    -1,    -1,   423,   424,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   287,   288,    -1,    -1,   291,    -1,
   433,    -1,    -1,    -1,   437,    -1,    -1,    -1,   301,   302,
    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,   321,    -1,
    -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,   479,    -1,
    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,   341,   342,
    -1,    -1,    -1,    -1,    -1,   348,    -1,   350,    -1,    -1,
    -1,    -1,    -1,   356,    -1,    -1,    -1,   360,    -1,    -1,
   503,   504,    -1,   506,    -1,    -1,   369,    -1,    -1,    -1,
    -1,    -1,   523,   524,    -1,   526,    -1,   528,   529,    -1,
    -1,   532,   533,   161,    -1,    -1,    -1,    -1,   166,    -1,
    -1,    -1,   543,    -1,   172,    -1,   169,   170,    -1,    -1,
   551,    -1,   553,   554,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   566,   419,    -1,   569,   422,
    -1,    -1,    -1,   426,   575,   576,    -1,    -1,   579,   580,
    -1,    -1,   435,   584,    -1,   586,   587,    -1,    -1,    -1,
    -1,   592,   593,   221,   595,    -1,   597,   598,    -1,    -1,
   601,    -1,   603,   604,    -1,   458,    26,    -1,    -1,   610,
    -1,    -1,    -1,    -1,    34,   468,   469,    37,    -1,    -1,
   473,    -1,    -1,    -1,   252,    -1,    46,    -1,    -1,    49,
    -1,    -1,   260,   256,   257,   258,   259,    -1,    -1,    -1,
    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
    70,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,   287,
   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   301,    -1,    95,    96,   530,   531,    99,
   308,   101,    -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,
    -1,    -1,    -1,   321,     3,    -1,     5,    -1,     7,    -1,
   328,    10,    -1,   556,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    23,    24,    -1,    26,    -1,    -1,
   348,    -1,   350,    32,    -1,   578,    35,    36,   356,    -1,
    39,    40,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
    -1,   369,    -1,    52,    -1,    54,    55,   370,   371,   372,
   373,   374,   375,   376,    -1,   378,   379,   380,   381,   382,
   383,   384,   385,   386,   387,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    -1,    96,    49,    -1,
    -1,   419,    -1,    -1,   422,    -1,    -1,    -1,   426,    60,
    61,    -1,    -1,    -1,    -1,    -1,    -1,   435,    69,    70,
   433,    -1,    73,    74,   437,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     5,     6,     7,     8,    -1,    10,    -1,    -1,
    -1,    14,    15,    16,    17,    -1,    -1,    -1,    99,   100,
   468,    24,    25,    26,    27,   473,    -1,    -1,    -1,    32,
    -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,
    43,    -1,    -1,    46,    47,    48,    49,    -1,    51,    -1,
    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
   503,   504,    -1,   506,    -1,    -1,    69,    70,     5,     6,
     7,    -1,    -1,    10,    -1,    -1,    -1,    14,    -1,    16,
    17,    -1,   530,   531,    -1,    -1,    -1,    24,    25,    26,
    27,   539,    95,    96,    -1,    32,    99,    34,    35,    -1,
    37,    -1,    -1,   106,    -1,    42,    43,    -1,   556,    46,
    47,    48,    49,    -1,    51,    -1,    53,    -1,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   578,    -1,    69,    70,     5,     6,     7,    -1,    -1,    10,
    -1,    -1,    -1,    14,    -1,    16,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    25,    26,    27,    -1,    95,    96,
    57,    32,    99,    34,    35,    -1,    37,    -1,    -1,   106,
    -1,    42,    43,    -1,    -1,    46,    47,    48,    49,    -1,
    51,    -1,    53,    -1,    -1,    56,    -1,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    69,    70,
     5,     6,     7,    -1,    -1,    10,    -1,    -1,    -1,    14,
    -1,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    24,
    25,    26,    27,    -1,    95,    96,    57,    32,    99,    34,
    35,    -1,    37,    -1,    -1,   106,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    49,    -1,    51,    -1,    53,    -1,
    -1,    56,    -1,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    69,    70,     5,     6,     7,    -1,
    -1,    10,    -1,    -1,    -1,    14,    -1,    16,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    -1,
    95,    96,    57,    32,    99,    34,    35,    -1,    37,    -1,
    -1,   106,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    49,    -1,    51,    -1,    53,    -1,    -1,    56,    -1,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    69,    70,     5,     6,     7,    -1,    -1,    10,    -1,    -1,
    -1,    14,    -1,    16,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    24,    25,    26,    27,    -1,    95,    96,    -1,    32,
    99,    34,    35,    -1,    37,    -1,    -1,   106,    -1,    42,
    43,    -1,    -1,    46,    47,    48,    49,    -1,    51,    -1,
    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,     5,     6,
     7,    -1,    -1,    10,    -1,    -1,    -1,    14,    -1,    16,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    26,
    27,    -1,    95,    96,    -1,    32,    99,    34,    35,    -1,
    37,    -1,    -1,   106,    -1,    42,    43,    -1,    -1,    46,
    47,    48,    49,    -1,    51,    -1,    53,    -1,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    69,    70,     5,     6,     7,    -1,    -1,    10,
    -1,    -1,    -1,    14,    -1,    16,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    25,    26,    27,    -1,    95,    96,
    -1,    32,    99,    34,    35,    -1,    37,    -1,    -1,   106,
    -1,    42,    43,     6,    -1,    46,    47,    48,    49,    -1,
    51,    14,    53,    16,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    25,    26,    27,    -1,    -1,    -1,    69,    70,
    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
    -1,     6,    -1,    46,    47,    48,    49,    -1,    51,    14,
    53,    16,    -1,    56,    95,    -1,    -1,    -1,    99,    -1,
    25,    26,    27,    -1,    -1,   106,    69,    70,     5,    34,
     7,    -1,    37,    10,    -1,    -1,    -1,    42,    -1,    -1,
    17,    46,    47,    48,    49,    -1,    51,    24,    53,    26,
    -1,    56,    95,    -1,    -1,    32,    99,    34,    35,    -1,
    37,    -1,    -1,   106,    69,    70,    43,    -1,    -1,    46,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
    95,    -1,    69,    70,    99,    -1,    73,    74,     3,    -1,
     5,   106,     7,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,    24,
    -1,    26,    99,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    35,    36,    -1,    -1,    39,    40,    41,    -1,    43,    44,
    -1,    -1,    -1,    48,     3,    -1,     5,    52,     7,    54,
    55,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    -1,
    -1,    -1,    -1,    26,    23,    24,    -1,    26,    -1,    -1,
    -1,    34,    -1,    32,    37,    -1,    35,    36,    -1,    26,
    39,    40,    41,    46,    43,    44,    49,    34,    -1,    48,
    37,    96,    -1,    52,    -1,    54,    55,    60,    61,    46,
    -1,    -1,    49,    -1,    -1,    -1,    69,    70,    -1,    -1,
    73,    74,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
    -1,    26,    69,    70,    -1,    -1,    73,    74,    -1,    34,
    -1,    -1,    37,    -1,    -1,    -1,    99,    96,    26,    -1,
    26,    46,    -1,   106,    49,    -1,    34,    -1,    34,    37,
    -1,    37,    99,    -1,    -1,    60,    61,    -1,    46,   106,
    46,    49,    -1,    49,    69,    70,    -1,    -1,    73,    74,
    -1,    -1,    60,    61,    60,    61,    -1,    -1,    -1,    -1,
    -1,    69,    70,    69,    70,    73,    74,    73,    74,    26,
    -1,    -1,    -1,    -1,    99,    -1,    26,    34,    -1,    -1,
    37,   106,    -1,    -1,    34,    -1,    -1,    37,    -1,    46,
    -1,    99,    49,    99,    -1,    -1,    46,    -1,   106,    49,
   106,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
    60,    61,    69,    70,    -1,    -1,    73,    74,    26,    69,
    70,    -1,    -1,    73,    74,    26,    34,    -1,    -1,    37,
    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    46,    -1,
    -1,    49,    99,   100,    -1,    46,    -1,    -1,    49,    99,
   100,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    60,
    61,    69,    70,    -1,    -1,    73,    74,    26,    69,    70,
    -1,    -1,    73,    74,    -1,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    26,    -1,    46,    -1,    -1,
    49,    99,   100,    34,    95,    96,    37,    -1,    99,    -1,
    -1,    60,    61,    -1,    -1,    46,    -1,    -1,    49,    -1,
    69,    70,    -1,    -1,    73,    74,    -1,    -1,    -1,    60,
    61,    -1,    -1,    -1,    -1,    -1,    26,    -1,    69,    70,
    -1,    -1,    73,    74,    34,    -1,    95,    37,    -1,    -1,
    99,    -1,    26,    -1,    -1,    -1,    46,    -1,    -1,    49,
    34,    -1,    -1,    37,    -1,    -1,    -1,    98,    99,    -1,
    60,    61,    46,    -1,    -1,    49,    -1,    -1,    -1,    69,
    70,    -1,    -1,    73,    74,    -1,    60,    61,    -1,    -1,
     3,    -1,     5,    -1,     7,    69,    70,    10,    -1,    73,
    74,    -1,    -1,    -1,    17,    -1,    -1,    -1,    98,    99,
    23,    24,    -1,    26,    -1,    -1,    57,    -1,    -1,    32,
    -1,    -1,    35,    36,    -1,    99,    39,    40,    41,    -1,
    43,    44,    -1,    -1,    -1,    48,    -1,    -1,    57,    52,
    -1,    54,    55,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    -1,    -1,    97,    -1,    99,    -1,
    -1,    -1,    -1,    -1,   105,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    -1,    -1,    97,    -1,
    99,    -1,    -1,    -1,    -1,    -1,   105
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_parse_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_parse_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_parse_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_parse_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_parse_CHAR = (token), YY_parse_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_parse_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_parse_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_parse_PURE
/* UNPURE */
#define YYLEX           YY_parse_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_parse_CHAR;                      /*  the lookahead symbol        */
YY_parse_STYPE      YY_parse_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_parse_NERRS;                 /*  number of parse errors so far */
#ifdef YY_parse_LSP_NEEDED
YY_parse_LTYPE YY_parse_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_parse_LSP_NEEDED
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL, &YY_parse_LLOC)
#else
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_parse_DEBUG != 0
int YY_parse_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_parse_CLASS::
#endif
     YY_parse_PARSE(YY_parse_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_parse_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_parse_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_parse_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_parse_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_parse_LTYPE *yyls = yylsa;
  YY_parse_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_parse_PURE
  int YY_parse_CHAR;
  YY_parse_STYPE YY_parse_LVAL;
  int YY_parse_NERRS;
#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE YY_parse_LLOC;
#endif
#endif

  YY_parse_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_parse_NERRS = 0;
  YY_parse_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_parse_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_parse_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_parse_LSP_NEEDED
      YY_parse_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_parse_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_parse_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_parse_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_parse_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_parse_LSP_NEEDED
      yyls = (YY_parse_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_parse_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_parse_CHAR == YYEMPTY)
    {
#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_parse_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_parse_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_parse_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_parse_CHAR);

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_parse_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_parse_CHAR, YY_parse_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_parse_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_parse_CHAR != YYEOF)
    YY_parse_CHAR = YYEMPTY;

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 55 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "LITERAL"); ;
    break;}
case 2:
#line 58 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "IDENTIFIER"); ;
    break;}
case 3:
#line 61 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 4:
#line 62 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 5:
#line 66 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 6:
#line 67 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 7:
#line 70 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 8:
#line 72 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 9:
#line 73 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "BOOLEAN"); ;
    break;}
case 10:
#line 76 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 11:
#line 77 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 12:
#line 80 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "LONG"); ;
    break;}
case 13:
#line 81 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "BYTE"); ;
    break;}
case 14:
#line 82 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "INT"); ;
    break;}
case 15:
#line 83 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "CHAR"); ;
    break;}
case 16:
#line 84 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "SHORT"); ;
    break;}
case 17:
#line 87 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "DOUBLE"); ;
    break;}
case 18:
#line 88 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "FLOAT"); ;
    break;}
case 19:
#line 91 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 20:
#line 94 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 21:
#line 97 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "[ ]", 0);
		yyval.ptr = create_AST_node("ArrKind1", v);
	;
    break;}
case 22:
#line 103 "parser.y"
{ // for multidimensional arrays 
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "[ ]", 0);
		yyval.ptr = create_AST_node("ArrKind2", v);
	;
    break;}
case 23:
#line 109 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "[ ]", 0);
		yyval.ptr = create_AST_node("ArrKind3", v);
	;
    break;}
case 24:
#line 119 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 25:
#line 120 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 26:
#line 123 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 27:
#line 126 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("QualName", attr);
	;
    break;}
case 28:
#line 135 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("CompUnit1",v);
	;
    break;}
case 29:
#line 142 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 30:
#line 143 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("CompUnit2",v);
	;
    break;}
case 31:
#line 148 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 32:
#line 149 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 33:
#line 151 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("CompUnit3",v);
	;
    break;}
case 34:
#line 157 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("CompUnit4",v);
	;
    break;}
case 35:
#line 166 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 36:
#line 167 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ImportDecnRec",v);
	;
    break;}
case 37:
#line 175 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 38:
#line 176 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("TypeDecRec",v);
	;
    break;}
case 39:
#line 184 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("PackageDecn", v);
	;
    break;}
case 40:
#line 192 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 41:
#line 193 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 42:
#line 196 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("SingleTypeImportDecn",v); 
	;
    break;}
case 43:
#line 203 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		yyval.ptr = create_AST_node("ImportDDec ",v); 
	;
    break;}
case 44:
#line 210 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 45:
#line 211 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "SCLN"); ;
    break;}
case 46:
#line 212 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 47:
#line 215 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 48:
#line 216 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Modifiers",v);
	;
    break;}
case 49:
#line 224 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "FINAL"); ;
    break;}
case 50:
#line 225 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "PRIVATE"); ;
    break;}
case 51:
#line 226 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "PROTECTED"); ;
    break;}
case 52:
#line 227 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "NATIVE"); ;
    break;}
case 53:
#line 228 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "SYNCHRONIZED"); ;
    break;}
case 54:
#line 229 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "STATIC"); ;
    break;}
case 55:
#line 230 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "PUBLIC"); ;
    break;}
case 56:
#line 231 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "TRANSIENT"); ;
    break;}
case 57:
#line 232 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "ABSTRACT"); ;
    break;}
case 58:
#line 233 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "VOLATILE"); ;
    break;}
case 59:
#line 236 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn1", v);
	;
    break;}
case 60:
#line 245 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn4", v);
	;
    break;}
case 61:
#line 252 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn5", v);
	;
    break;}
case 62:
#line 260 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn6", v);
	;
    break;}
case 63:
#line 268 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn7", v);
	;
    break;}
case 64:
#line 275 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn8", v);
	;
    break;}
case 65:
#line 281 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn2", v);
	;
    break;}
case 66:
#line 289 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassDecn3", v);
	;
    break;}
case 67:
#line 300 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, "EXTENDS"), "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Super", v);
	;
    break;}
case 68:
#line 308 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, "IMPLEMENTS"), "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Intfaces", v);
	;
    break;}
case 69:
#line 316 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 70:
#line 317 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceTypeList", v);
	;
    break;}
case 71:
#line 325 "parser.y"
{yyval.ptr = create_AST_leaf("{ }", "LITERAL");;
    break;}
case 72:
#line 326 "parser.y"
{yyval.ptr=yyvsp[-1].ptr;;
    break;}
case 73:
#line 330 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 74:
#line 331 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassBodyDecRec", v);
;
    break;}
case 75:
#line 339 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 76:
#line 340 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 77:
#line 341 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 78:
#line 344 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 79:
#line 345 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 80:
#line 348 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("FieldDecn1", v);
;
    break;}
case 81:
#line 355 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("FieldDecn2", v);
;
    break;}
case 82:
#line 363 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 83:
#line 364 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("VariableDecltrs", v);
;
    break;}
case 84:
#line 372 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 85:
#line 373 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str, v);
	;
    break;}
case 86:
#line 381 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 87:
#line 382 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "[ ]", 0);
		yyval.ptr = create_AST_node("VariableDecltrId", v);
	;
    break;}
case 88:
#line 390 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 89:
#line 391 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 90:
#line 396 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodDecn", v);
	;
    break;}
case 91:
#line 404 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead1", v);
	;
    break;}
case 92:
#line 412 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead2", v);
	;
    break;}
case 93:
#line 419 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead4", v);
	;
    break;}
case 94:
#line 425 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead5", v);
	;
    break;}
case 95:
#line 432 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead6", v);
	;
    break;}
case 96:
#line 438 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead7", v);
	;
    break;}
case 97:
#line 444 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead8", v);
	;
    break;}
case 98:
#line 449 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodHead3", v);
	;
    break;}
case 99:
#line 460 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodDecltr1", attr);
	;
    break;}
case 100:
#line 466 "parser.y"
{yyval.ptr =yyvsp[-2].ptr;;
    break;}
case 101:
#line 467 "parser.y"
{ 
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "[ [", 0);
		yyval.ptr = create_AST_node("MethodDecltr2", v);
	;
    break;}
case 102:
#line 475 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 103:
#line 476 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("FormalParamList", v);
;
    break;}
case 104:
#line 484 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("FormalParam", v);
;
    break;}
case 105:
#line 492 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, "THROWS"), "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Throws", v);
	;
    break;}
case 106:
#line 501 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 107:
#line 502 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassTypeList", v);
;
    break;}
case 108:
#line 511 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[0].str, "SCLN");;
    break;}
case 109:
#line 512 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 110:
#line 516 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, "STATIC"), "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("StaticInit", v);
	;
    break;}
case 111:
#line 524 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorDecn1", v);
	;
    break;}
case 112:
#line 532 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorDecn3", v);
	;
    break;}
case 113:
#line 539 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorDecn4", v);
	;
    break;}
case 114:
#line 545 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorDecn2", v);
	;
    break;}
case 115:
#line 555 "parser.y"
{
		vector<treeNode> v, v2;
		add_attribute(v2, yyvsp[-1].ptr, "", 1);
		Node* node = create_AST_node("( )", v2);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, node, "", 1);
		yyval.ptr = create_AST_node("ConstructorDecltr1", v);
	;
    break;}
case 116:
#line 563 "parser.y"
{	
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, NULL, "( )", 0);
		yyval.ptr = create_AST_node("ConstructorDecltr2", v);
	;
    break;}
case 117:
#line 571 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorBody", v);
;
    break;}
case 118:
#line 577 "parser.y"
{yyval.ptr = create_AST_leaf("{}", "LITERAL");;
    break;}
case 119:
#line 578 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 120:
#line 579 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 121:
#line 582 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		yyval.ptr = create_AST_node("ConstructorBody1", v);
;
    break;}
case 122:
#line 588 "parser.y"
{
		vector<treeNode> v;
		yyval.ptr = create_AST_node("ConstructorBody2", v);
;
    break;}
case 123:
#line 592 "parser.y"
{
		vector<treeNode> v;
		yyval.ptr = create_AST_node("ConstructorBody3", v);
;
    break;}
case 124:
#line 596 "parser.y"
{
		vector<treeNode> v;
		yyval.ptr = create_AST_node("ConstructorBody4", v);
;
    break;}
case 125:
#line 603 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceDecn1", v);
;
    break;}
case 126:
#line 611 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceDecn3", v);
;
    break;}
case 127:
#line 618 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceDecn4", v);
;
    break;}
case 128:
#line 624 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceDecn2", v);
;
    break;}
case 129:
#line 635 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ExtendsIntfaces1", v);
	;
    break;}
case 130:
#line 640 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ExtendsIntfaces2", v);
;
    break;}
case 131:
#line 648 "parser.y"
{yyval.ptr = create_AST_leaf("{ }", "EMPTY");;
    break;}
case 132:
#line 649 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 133:
#line 652 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 134:
#line 653 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IntfaceMemberDecnRec", v);
;
    break;}
case 135:
#line 661 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 136:
#line 662 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 137:
#line 665 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 138:
#line 668 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 139:
#line 671 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		yyval.ptr = create_AST_node("ArrInit1", v);
;
    break;}
case 140:
#line 677 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ArrInit3", v);
;
    break;}
case 141:
#line 682 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[-1].str, "EMPTY");;
    break;}
case 142:
#line 683 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		yyval.ptr = create_AST_node("ArrInit2", v);
;
    break;}
case 143:
#line 691 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("VariableInitList", v);
;
    break;}
case 144:
#line 697 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 145:
#line 701 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 146:
#line 702 "parser.y"
{yyval.ptr = create_AST_leaf("{}", "EMPTY");;
    break;}
case 147:
#line 705 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BlockStmts", v);
;
    break;}
case 148:
#line 711 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 149:
#line 714 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 150:
#line 715 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 151:
#line 718 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 152:
#line 721 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("LocalVariableDecn", v);
;
    break;}
case 153:
#line 729 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 154:
#line 730 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 155:
#line 731 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 156:
#line 732 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 157:
#line 733 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 158:
#line 734 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 159:
#line 737 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 160:
#line 738 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 161:
#line 739 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 162:
#line 740 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 163:
#line 741 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 164:
#line 744 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 165:
#line 745 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 166:
#line 746 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 167:
#line 747 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 168:
#line 748 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 169:
#line 749 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 170:
#line 750 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 171:
#line 751 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 172:
#line 752 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 173:
#line 753 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 174:
#line 754 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 175:
#line 756 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[0].str, "SCLN");;
    break;}
case 176:
#line 759 "parser.y"
{yyval.ptr = yyvsp[-2].ptr;;
    break;}
case 177:
#line 762 "parser.y"
{yyval.ptr = yyvsp[-2].ptr;;
    break;}
case 178:
#line 765 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 179:
#line 768 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 180:
#line 769 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 181:
#line 770 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 182:
#line 771 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 183:
#line 772 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 184:
#line 773 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 185:
#line 774 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 186:
#line 777 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IfThenStmt", v);
	;
    break;}
case 187:
#line 785 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IfThenElseStmt", v);
	;
    break;}
case 188:
#line 794 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("IfThenElseStmtKind", v);
	;
    break;}
case 189:
#line 804 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchStmt", v);
	;
    break;}
case 190:
#line 812 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchBlock", v);
	;
    break;}
case 191:
#line 818 "parser.y"
{yyval.ptr = create_AST_leaf("{ }", "EMPTY");;
    break;}
case 192:
#line 819 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 193:
#line 820 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 194:
#line 823 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 195:
#line 824 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchBlockStmtGroups", v);
	;
    break;}
case 196:
#line 832 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 197:
#line 833 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchLabels", v);
	;
    break;}
case 198:
#line 841 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchBlockStmtGroup", v);
	;
    break;}
case 199:
#line 850 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("SwitchLabel1", v);
	;
    break;}
case 200:
#line 855 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, NULL, "default", 0);
		yyval.ptr = create_AST_node("SwitchLabel2", v); // empty?
	;
    break;}
case 201:
#line 862 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("WhileStmt", v);
	;
    break;}
case 202:
#line 870 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("WhileStmtKind", v);
	;
    break;}
case 203:
#line 878 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		yyval.ptr = create_AST_node("DoStmt", v);
	;
    break;}
case 204:
#line 886 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 205:
#line 889 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 206:
#line 892 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-6].ptr, "", 1);
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt1", v);
	;
    break;}
case 207:
#line 900 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt5", v);
	;
    break;}
case 208:
#line 907 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, $3, "", 1);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt6", v);
	;
    break;}
case 209:
#line 914 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		// add_attribute(v, $4, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt7", v);
	;
    break;}
case 210:
#line 921 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, $3, "", 1);
		// add_attribute(v, $4, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt8", v);
	;
    break;}
case 211:
#line 928 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt2", v);
	;
    break;}
case 212:
#line 935 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt3", v);
	;
    break;}
case 213:
#line 942 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		// add_attribute(v, $6, "", 1);
		yyval.ptr = create_AST_node("BasicForStmt4", v);
	;
    break;}
case 214:
#line 952 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-6].ptr, "", 1);
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf1", v);
	;
    break;}
case 215:
#line 960 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf2", v);
	;
    break;}
case 216:
#line 967 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf3", v);
	;
    break;}
case 217:
#line 974 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		// add_attribute(v, $6, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf4", v);
	;
    break;}
case 218:
#line 981 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-5].ptr, "", 1);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf5", v);
	;
    break;}
case 219:
#line 988 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, $3, "", 1);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf6", v);
	;
    break;}
case 220:
#line 995 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-4].ptr, "", 1);
		// add_attribute(v, $4, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf7", v);
	;
    break;}
case 221:
#line 1002 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, $3, "", 1);
		// add_attribute(v, $4, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("BasicForStmtNoShortIf8", v);
	;
    break;}
case 222:
#line 1011 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 223:
#line 1012 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 224:
#line 1015 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 225:
#line 1018 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("StmtExprList", attr);
	;
    break;}
case 226:
#line 1024 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 227:
#line 1027 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("CBreakStmt", v);
	;
    break;}
case 228:
#line 1033 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[-1].str, "BREAK");;
    break;}
case 229:
#line 1036 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ContinueStmt", v);
	;
    break;}
case 230:
#line 1042 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[-1].str, "CONTINUE");;
    break;}
case 231:
#line 1045 "parser.y"
{yyval.ptr = create_AST_leaf(yyvsp[-1].str, "RETURN");;
    break;}
case 232:
#line 1046 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ReturnStmt", v);
	;
    break;}
case 233:
#line 1054 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ThrowStmt", v);
	;
    break;}
case 234:
#line 1062 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("SynchronizedStmt", v);
	;
    break;}
case 235:
#line 1069 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("TryStmt1", v);
	;
    break;}
case 236:
#line 1075 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("TryStmt2", v);
	;
    break;}
case 237:
#line 1081 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("TryStmt3", v);
	;
    break;}
case 238:
#line 1090 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Catches", v);
	;
    break;}
case 239:
#line 1096 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 240:
#line 1099 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("CatchClause", v);
	;
    break;}
case 241:
#line 1108 "parser.y"
{
		vector<treeNode> v;
		// add_attribute(v, create_AST_leaf($1, ""), "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ResEnd:Finally", v);
	;
    break;}
case 242:
#line 1116 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 243:
#line 1117 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 244:
#line 1120 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 245:
#line 1121 "parser.y"
{yyval.ptr = yyvsp[-1].ptr;;
    break;}
case 246:
#line 1122 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 247:
#line 1123 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 248:
#line 1124 "parser.y"
{ yyval.ptr = create_AST_leaf(yyvsp[0].str, "THIS");;
    break;}
case 249:
#line 1125 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 250:
#line 1126 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 251:
#line 1129 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-4].str, ""), "", 1);
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("ClassInstCreationExpr1", attr);
	;
    break;}
case 252:
#line 1136 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-3].str, ""), "", 1);
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		// add_attribute(attr, $4, "", 1);
		yyval.ptr = create_AST_node("ClassInstCreationExpr2", attr);
	;
    break;}
case 253:
#line 1145 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 254:
#line 1146 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Arg_list", attr);
	;
    break;}
case 255:
#line 1156 "parser.y"
{
		
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Field access", attr);
	;
    break;}
case 256:
#line 1163 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("Field access", attr);
	;
    break;}
case 257:
#line 1171 "parser.y"
{
		vector<treeNode> v, v2;
		add_attribute(v2, yyvsp[-1].ptr, "", 1);
		Node* node = create_AST_node("[ ]", v2);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, node, "", 1);
		yyval.ptr = create_AST_node("ArrOp1", v);
	;
    break;}
case 258:
#line 1179 "parser.y"
{
		vector<treeNode> v, v2;
		add_attribute(v2, yyvsp[-1].ptr, "", 1);
		Node* node = create_AST_node("[ ]", v2);
		add_attribute(v, yyvsp[-3].ptr, "", 1);
		add_attribute(v, node, "", 1);
		yyval.ptr = create_AST_node("ArrOp2", v);
	;
    break;}
case 259:
#line 1189 "parser.y"
{ 
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodInvocation", attr);
	;
    break;}
case 260:
#line 1195 "parser.y"
{ yyval.ptr= yyvsp[-2].ptr; ;
    break;}
case 261:
#line 1196 "parser.y"
{
		vector<treeNode> v, v2;
		add_attribute(v2, yyvsp[-5].ptr, "", 1);
		add_attribute(v2, yyvsp[-3].ptr, "", 1);
		Node* node = create_AST_node(yyvsp[-4].str, v2);
		add_attribute(v, node, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodInvocation", v);
	;
    break;}
case 262:
#line 1205 "parser.y"
{
		
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-4].ptr, "", 1);
		add_attribute(attr, create_AST_leaf(yyvsp[-3].str, ""), "", 1);
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodInvocation", attr);
	;
    break;}
case 263:
#line 1213 "parser.y"
{
		
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-5].str, ""), "", 1);
		add_attribute(attr, create_AST_leaf(yyvsp[-4].str, ""), "", 1);
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-1].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodInvocation", attr);
	;
    break;}
case 264:
#line 1222 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-4].str, ""), "", 1);
		add_attribute(attr, create_AST_leaf(yyvsp[-3].str, ""), "", 1);
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		yyval.ptr = create_AST_node("MethodInvocation", attr);
	;
    break;}
case 265:
#line 1232 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-3].str, ""), "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ArrCreationExpr1", v);
	;
    break;}
case 266:
#line 1240 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ArrCreationExpr2", v);
	;
    break;}
case 267:
#line 1247 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-3].str, ""), "", 1);
		add_attribute(v, yyvsp[-2].ptr, "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ArrCreationExpr3", v);
	;
    break;}
case 268:
#line 1255 "parser.y"
{
		vector<treeNode> v;
		add_attribute(v, create_AST_leaf(yyvsp[-2].str, ""), "", 1);
		add_attribute(v, yyvsp[-1].ptr, "", 1);
		add_attribute(v, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("ArrCreationExpr4", v);
	;
    break;}
case 269:
#line 1264 "parser.y"
{ 
			vector<treeNode> attr;
			add_attribute(attr, yyvsp[-1].ptr, "", 1);
			add_attribute(attr, yyvsp[0].ptr, "", 1);
			yyval.ptr = create_AST_node("dim_exprs",attr);
		;
    break;}
case 270:
#line 1270 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 271:
#line 1274 "parser.y"
{yyval.ptr= yyvsp[-1].ptr;;
    break;}
case 272:
#line 1277 "parser.y"
{yyval.ptr = create_AST_leaf("[ ]", "EMPTY_EXP") ;;
    break;}
case 273:
#line 1278 "parser.y"
{ 
			vector<treeNode> attr;
			add_attribute(attr, yyvsp[-2].ptr, "", 1);
			add_attribute(attr, create_AST_leaf("[ ]", "EMPTY_EXP"), "", 1);
			yyval.ptr = create_AST_node("dims",attr);
		;
    break;}
case 274:
#line 1286 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 275:
#line 1289 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 276:
#line 1290 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 277:
#line 1293 "parser.y"
{
							vector<treeNode> attr;
							add_attribute(attr, yyvsp[-2].ptr, "", 1);
							add_attribute(attr, yyvsp[0].ptr, "", 1);
							yyval.ptr = create_AST_node(yyvsp[-1].str,attr);
						;
    break;}
case 278:
#line 1301 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 279:
#line 1302 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 280:
#line 1303 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 281:
#line 1306 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 282:
#line 1307 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 283:
#line 1308 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 284:
#line 1309 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 285:
#line 1310 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 286:
#line 1311 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 287:
#line 1312 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 288:
#line 1313 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 289:
#line 1314 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 290:
#line 1315 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 291:
#line 1316 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 292:
#line 1317 "parser.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 293:
#line 1320 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 294:
#line 1321 "parser.y"
{
											vector<treeNode> attr;
											add_attribute(attr, yyvsp[-4].ptr, "", 1);
											add_attribute(attr, yyvsp[-2].ptr, "", 1);
											add_attribute(attr, yyvsp[0].ptr, "", 1);
											yyval.ptr = create_AST_node("ternary operator",attr);
										;
    break;}
case 295:
#line 1330 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 296:
#line 1331 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 297:
#line 1339 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 298:
#line 1340 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 299:
#line 1348 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 300:
#line 1349 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 301:
#line 1357 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 302:
#line 1358 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 303:
#line 1366 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 304:
#line 1367 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 305:
#line 1375 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 306:
#line 1376 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 307:
#line 1382 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 308:
#line 1390 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 309:
#line 1391 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 310:
#line 1397 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 311:
#line 1403 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 312:
#line 1409 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 313:
#line 1415 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 314:
#line 1424 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 315:
#line 1425 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 316:
#line 1434 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 317:
#line 1435 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 318:
#line 1441 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 319:
#line 1449 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 320:
#line 1450 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 321:
#line 1456 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 322:
#line 1462 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str ,attr);
	;
    break;}
case 323:
#line 1470 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 324:
#line 1471 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 325:
#line 1472 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("unary_exp_plus",attr);
	;
    break;}
case 326:
#line 1478 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("unary_exp_minus",attr);
	;
    break;}
case 327:
#line 1484 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 328:
#line 1487 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str,attr);
	;
    break;}
case 329:
#line 1494 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node(yyvsp[-1].str,attr);
	;
    break;}
case 330:
#line 1501 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 331:
#line 1502 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("unary_exp_tilde",attr);
	;
    break;}
case 332:
#line 1508 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, create_AST_leaf(yyvsp[-1].str, ""), "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("unary_exp_not",attr);
	;
    break;}
case 333:
#line 1514 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 334:
#line 1517 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 335:
#line 1518 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 336:
#line 1519 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 337:
#line 1520 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
case 338:
#line 1523 "parser.y"
{
						vector<treeNode> attr;
						add_attribute(attr, yyvsp[-1].ptr, "", 1);
						yyval.ptr = create_AST_node(yyvsp[0].str, attr);
				;
    break;}
case 339:
#line 1529 "parser.y"
{
						vector<treeNode> attr;
						add_attribute(attr, yyvsp[-1].ptr, "", 1);
						yyval.ptr = create_AST_node(yyvsp[0].str, attr);
				;
    break;}
case 340:
#line 1536 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("cast_Expr1" ,attr);
	;
    break;}
case 341:
#line 1545 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("cast_Expr2" ,attr);
	;
    break;}
case 342:
#line 1552 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("cast_Expr3" ,attr);
	;
    break;}
case 343:
#line 1559 "parser.y"
{
		vector<treeNode> attr;
		add_attribute(attr, yyvsp[-3].ptr, "", 1);
		add_attribute(attr, yyvsp[-2].ptr, "", 1);
		add_attribute(attr, yyvsp[0].ptr, "", 1);
		yyval.ptr = create_AST_node("cast_Expr4" ,attr);
	;
    break;}
case 344:
#line 1569 "parser.y"
{yyval.ptr = yyvsp[0].ptr;;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_parse_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_parse_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_parse_LLOC.first_line;
      yylsp->first_column = YY_parse_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_parse_NERRS;

#ifdef YY_parse_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_parse_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_parse_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_parse_ERROR_VERBOSE */
	YY_parse_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_parse_CHAR == YYEOF)
	YYABORT;

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_parse_CHAR, yytname[yychar1]);
#endif

      YY_parse_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_parse_LSP_NEEDED
  yylsp--;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 1572 "parser.y"


void help(){
	fprintf(stdout, "Usage Guidelines:\n");
	fprintf(stdout, "./ans [OPTIONS]\n");
	fprintf(stdout, "Where options are:\n");
	fprintf(stdout, "\t--help: For usage guidelines\n");
	fprintf(stdout, "\t-input <file>: Passes the input java file to the parser to be read.\n");
	fprintf(stdout, "\t-output <file>: Creates the dot script containing the AST in <file>\n");
}

bool check_fp(FILE* fp, char* name)
{
	if(fp == NULL){
		fprintf(stdout, "Error: Unable to open %s. Please retry.\n", name);
		return false;
	}
	else return true; //successfully opened file 

}

int main(int argc, char** argv) 

{
	char* output_dot_file = "graph.dot";
	char* input_java_file = "test.java";
	if(argc <= 1){
		fprintf(stdout, "Please pass arguments for input and output and retry.\n");
		return 1;
	}
	for(int i = 1; i<argc; i++){
		if(!strcmp(argv[i], "--help")){
			help();
			return 0;
		}
	}
	for(int i=1;i<argc; ++i)
	{
		if(!strcmp(argv[i], "-input"))
		{
			if(i+1 >= argc || argv[i+1][0] == '-')
			{
				fprintf(stdout, "Error: Please add the input filename after \"-input\" and retry.\n");
				return 1; //error detected
			}
			else
			{
				input_java_file = argv[i+1]; //output file name
				i++;
			}
		}
		if(!strcmp(argv[i], "-output"))
		{
			if(i+1 >= argc || argv[i+1][0] == '-')
			{
				fprintf(stdout, "Error: Please add the output filename after \"-output\" and retry.\n");
				return 2; //error detected
			}
			else
			{
				output_dot_file = argv[i+1]; //output file name
				i++;
			}
		}
		if(!strcmp(argv[i], "-verbose")) verbose= true; //give better error messages 
	}
	yyin = fopen(input_java_file, "r"); // this opens the java input file
	dotfile = fopen(output_dot_file, "w"); // opens output dot file 
	if(!check_fp(yyin, input_java_file)) return 3;
	if(!check_fp(dotfile, output_dot_file)) return 4;
	fprintf(dotfile, "digraph AST {\n\tordering=out;\n");
    int column = 0;
	file = input_java_file;
	yyrestart(yyin); 
	yyparse();
	fprintf(dotfile, "}\n"); 	// Dot file has been completely written to 
	fclose(dotfile);	
	return 0;
}

int yyerror(const char *s) { 
	FILE *duplicate_input_file = fopen(file, "r");
	int count = 1;
	if(!verbose)
	{
		fprintf(stderr, "Error on line number %d: %s\n",yylineno, s);
		exit(1);
	}
	//verbose error message prints entire line. 
	char input_line[512];  //possible maximum line size 
	while (fgets(input_line, sizeof(input_line), duplicate_input_file) != NULL) {
		if (count == yylineno){
			fprintf(stderr, "Error on line number:%d\n",yylineno);
			fprintf(stderr, "Error reported by parser: %s\n",s);
			fprintf(stderr, "Check error near line: %s\n",input_line);
			return 4;
		}
		else{
			count++;
		}
	}
	fclose(duplicate_input_file);
	return -1;
}

