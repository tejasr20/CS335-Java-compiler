#line 2 "scanner.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
static yyconst short int yy_acclist[502] =
    {   0,
      109,  106,  108,    1,  106,  108,    2,  106,  108,    1,
        2,  106,  108,   60,  106,  108,  106,  108,  105,  106,
      108,   82,  106,  108,   80,  106,  108,  106,  108,   91,
      106,  108,   92,  106,  108,   55,  106,  108,   53,  106,
      108,  101,  106,  108,   54,  106,  108,   95,  106,  108,
       56,  106,  108,  104,  106,  108,  104,  106,  108,   63,
      106,  108,   96,  106,  108,   59,  106,  108,   57,  106,
      108,   58,  106,  108,   62,  106,  108,   93,  106,  108,
      105,  108,   97,  106,  108,   98,  106,  108,   81,  106,
      108,  105,  106,  108,  105,  106,  108,  105,  106,  108,

      105,  106,  108,  105,  106,  108,  105,  106,  108,  105,
      106,  108,  105,  108,  105,  106,  108,  105,  108,  105,
      106,  108,  105,  106,  108,  105,  106,  108,  105,  108,
      105,  106,  108,  105,  106,  108,   99,  108,   79,  106,
      108,  100,  108,   61,  106,  108,    1,   74,  104,  105,
       90,   78,   86,   85,   75,   83,   76,   84,   64,  103,
      104,  107,   89,  104,  104,  104,  104,  102,   68,   67,
       65,   66,   69,   88,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,   41,  105,  105,  105,  105,  105,
      105,  105,  105,  105,   28,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   87,   77,   94,  104,  104,
      107,  107,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   72,   71,   70,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,   27,  105,  105,  105,  105,   10,
      105,  105,  105,   39,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   21,  105,  105,  105,  105,  104,  107,  107,  107,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,   73,  105,  105,  105,  105,    4,  105,    5,
      105,  105,   11,  105,  105,  105,  105,  105,  105,   43,
      105,   44,  105,  105,  105,  105,  105,   29,  105,  105,
      105,  105,  105,   37,  105,  105,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,   17,
      105,  105,  105,  104,  105,   50,  105,  105,  105,  104,
      107,  107,  104,  104,  105,  105,  105,   26,  105,    6,
      105,   12,  105,   13,  105,  105,  105,  105,  105,   46,
      105,   48,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,   34,  105,  105,  105,    3,  105,  105,

      105,   18,  105,  105,  105,   52,  105,  107,  104,  104,
      105,   24,  105,  105,  105,  105,   42,  105,  105,  105,
      105,    8,  105,  105,  105,   38,  105,  105,  105,  105,
       32,  105,   33,  105,   35,  105,  105,   15,  105,  105,
       19,  105,  105,  105,  107,  105,   25,  105,  105,   40,
      105,   45,  105,   47,  105,  105,  105,  105,   49,  105,
       30,  105,  105,  105,  105,  105,  105,  107,   23,  105,
       14,  105,  105,  105,  105,  105,   36,  105,  105,  105,
       51,  105,  105,  105,   22,  105,   31,  105,  105,   20,
      105,    7,  105,    9,  105,  105,  104,  105,  104,   16,

      105
    } ;

static yyconst short int yy_accept[452] =
    {   0,
        1,    1,    1,    2,    4,    7,   10,   14,   17,   19,
       22,   25,   28,   30,   33,   36,   39,   42,   45,   48,
       51,   54,   57,   60,   63,   66,   69,   72,   75,   78,
       81,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  115,  118,  120,  123,  126,  129,  131,  134,
      137,  139,  142,  144,  147,  148,  149,  149,  150,  150,
      151,  152,  153,  154,  154,  154,  155,  156,  157,  158,
      159,  160,  161,  161,  162,  162,  163,  164,  165,  166,
      166,  166,  166,  166,  166,  167,  168,  168,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,

      180,  181,  182,  183,  184,  185,  187,  188,  189,  190,
      191,  192,  193,  194,  195,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  219,  220,  221,
      221,  221,  221,  221,  221,  222,  223,  224,  225,  225,
      226,  227,  227,  227,  227,  228,  228,  229,  229,  230,
      231,  232,  232,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  257,  258,  259,

      260,  262,  263,  264,  266,  267,  268,  269,  270,  271,
      272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
      282,  284,  285,  286,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  288,  288,  288,  289,  290,  291,  292,
      292,  292,  293,  293,  294,  295,  295,  296,  297,  297,
      297,  297,  298,  299,  299,  299,  300,  300,  300,  301,
      302,  302,  303,  303,  304,  305,  306,  307,  308,  310,
      312,  313,  315,  316,  317,  318,  319,  320,  322,  324,
      325,  326,  327,  328,  330,  331,  332,  333,  334,  336,
      337,  339,  340,  341,  342,  343,  344,  345,  346,  347,

      348,  349,  350,  352,  353,  354,  356,  358,  359,  360,
      360,  360,  360,  360,  361,  361,  362,  363,  364,  364,
      364,  364,  364,  364,  365,  365,  366,  367,  368,  370,
      372,  374,  376,  377,  378,  379,  380,  382,  384,  385,
      386,  387,  388,  389,  390,  391,  392,  393,  394,  396,
      397,  398,  400,  401,  402,  404,  405,  406,  408,  408,
      408,  408,  408,  409,  409,  410,  411,  411,  411,  412,
      414,  415,  416,  417,  419,  420,  421,  422,  424,  425,
      426,  428,  429,  430,  431,  433,  435,  437,  438,  440,
      441,  443,  444,  445,  445,  446,  446,  446,  447,  449,

      450,  452,  454,  456,  457,  458,  459,  461,  463,  464,
      465,  466,  467,  468,  468,  469,  469,  469,  471,  473,
      474,  475,  476,  477,  479,  480,  481,  483,  483,  483,
      483,  484,  485,  487,  489,  490,  492,  492,  492,  492,
      494,  496,  497,  497,  498,  498,  499,  499,  500,  502,
      502
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   37,   37,   40,   41,
       37,   37,   37,   37,   37,   37,   37,   42,   37,   37,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   37,   57,   58,   59,   60,
       61,   62,   37,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[76] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    1,    1,    4,
        1,    1,    1,    1,    1,    1,    5,    1,    6,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    3,    3,    7,    3,
        8,    3,    1,    1,    1,    1,    8,    6,    6,    6,
        6,    6,    6,    3,    3,    3,    3,    7,    3,    3,
        3,    8,    3,    3,    3,    9,    3,    3,    3,    3,
        3,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[469] =
    {   0,
        0,    0, 1014, 1181,   74, 1181,   75,  986,   74,    0,
      985,   72,  961, 1181, 1181,  977,   68, 1181,   69,   70,
       85,  102,  155,  979, 1181,   74,  975,   77, 1181, 1181,
        0, 1181, 1181,  974,   45,   45,   59,   50,   69,   84,
      939,   93,  938,   91,   65,  940,   93,   92,  930,  935,
     1181,   57, 1181, 1181,   84, 1181,  120, 1181,  208,    0,
     1181, 1181, 1181,  979,  269, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  971,  317,  166,  943, 1181,  164,  354,  202,
      116,  219,  969,  225,  261, 1181,  244,  273, 1181,  958,
     1181, 1181, 1181,  138, 1181,  920,  919,  921,  921,  907,

      103,  922,  921,  908,  914,  900,  901,  898,  892,  894,
      891,  884,  880,  877,    0,  879,  116,  880,  874,  870,
      878,  885,  132,  885,  861,  864,  134,  862,  867,  862,
      140,  237,  153,  865, 1181, 1181,  199,  280,  306,  206,
      854,  899,  295,  323,  106,  842, 1181,    0, 1181,  340,
      360,  274,  306,  354,  863,  129,  394, 1181,  376,  401,
     1181,  856,  435,  441,  212,  365,  447,    0,  433,  457,
        0,  486,  412,  491,  496, 1181, 1181,  878,  839,  851,
      838,  846,  841,  840,  834,  820,  818,  191,  833,  830,
      825,  817,  823,  810,  814,  813,    0,  791,  143,  786,

      798,  794,  791,    0,  788,  788,  776,  777,  783,  774,
      776,  772,  779,  782,  768,  782,  767,  753,  752,  759,
        0,  759,  754,  743,  515,  305,  756,    0,  510,  232,
        0,  526,  531,  406,  439, 1181,  334,  566,    0,  549,
      541,  586,  732,  536, 1181,  418,  604, 1181,  622,  364,
      363,  613, 1181,  642,  629,  657,  745,  663,  678, 1181,
      697,    0,  713, 1181,  731,  730,  740,  723,    0,    0,
      724,    0,  708,  705,  712,  701,  708,    0,    0,  704,
      711,  704,  696,    0,  701,  688,  702,  680,    0,  675,
        0,  682,  680,  675,  670,  661,  658,  666,  671,  650,

      661,  653,    0,  639,  642,    0,    0,  640,  650,  359,
        0,  651,    0,  718,  726,  383,  755,  762,  797,  660,
      533,  587,  736,  802,  628,  642,  624,  640,    0,    0,
        0,    0,  621,  615,  620,  616,  608,    0,  600,  585,
      588,  594,  584,  581,  564,  571,  563,  552,    0,  561,
      539,    0,  548,  529,  527,  534,  525,    0,  535,    0,
      533,    0,  837,  520,  844, 1181,  807,  539,  516,    0,
      498,  491,  476,    0,  476,  469,  476,    0,  476,  476,
        0,  471,  470,  438,    0,    0,    0,  449,    0,  440,
        0,  447,  438,  587,  879,  439,  436,  425,    0,  435,

        0,    0,    0,  426,  433,  434,    0,    0,  421,  409,
      384,  379,  356,  927,  358,  335,  312,    0,    0,  290,
      287,  295,  295,    0,  285,  266,    0,  975,  265,  265,
      242,  244,    0,    0,  198,    0, 1023,  897,  197,    0,
        0,  184, 1058,  195,  934,  175,  445,  265,    0, 1181,
     1111, 1118, 1127, 1136, 1145, 1150, 1151, 1155, 1164,  214,
     1169,  204,  186, 1172,  156,  150,  127,  104
    } ;

static yyconst short int yy_def[469] =
    {   0,
      450,    1,  450,  450,  450,  450,  450,  450,  451,  452,
      450,  450,  453,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      452,  450,  450,  450,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      450,  450,  450,  450,  450,  450,  451,  450,  450,  452,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  454,  455,  450,  450,  450,  450,
      450,  450,  456,  450,   23,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  450,  450,  451,  451,  451,  451,
      457,  450,  450,  450,  450,  458,  450,   74,  450,  450,
      450,  454,  454,  459,  455,  455,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  460,  461,   79,
       85,  450,  450,  450,   85,  450,  450,  450,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  451,  451,   59,  462,  450,  450,
      463,  450,  450,  454,  454,  450,  455,  455,  157,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  464,
      460,  461,  450,  450,  252,  450,  450,  450,  450,  450,
      450,  175,  450,  450,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  451,
      465,  450,  466,  450,  450,  455,  455,  450,  450,  450,
      464,  464,  450,  450,  450,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,   59,  467,
      450,  468,  317,  450,  450,  450,  450,  450,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  451,  317,  450,  450,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  451,  455,  450,  450,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  414,  450,  450,
      452,  452,  452,  452,  452,  452,  428,  450,  450,  452,
      452,  452,  428,  450,  450,  452,  451,  450,  452,    0,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450
    } ;

static yyconst short int yy_nxt[1257] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   24,   25,   26,   27,   28,   29,   30,
       10,   10,   31,   31,   10,   10,   10,   31,   31,   10,
       10,   10,   32,    4,   33,   34,   10,   35,   36,   37,
       38,   39,   40,   41,   10,   42,   10,   43,   31,   44,
       10,   45,   46,   47,   48,   10,   49,   50,   10,   10,
       10,   51,   52,   53,   54,   55,   55,   55,   55,   58,
       62,   67,   72,  135,   69,   55,   73,   55,   74,   74,
       74,   74,   74,   96,   68,   70,   71,   75,   63,   90,

       91,  105,   76,   93,   94,   98,  101,   99,   97,   64,
      106,   77,  122,  102,  100,   58,  103,   59,   78,  104,
       79,   79,   79,   79,   80,   58,  107,  123,  108,  136,
      124,  110,   57,   81,  165,  165,   82,  109,  119,  111,
       58,  112,  120,   83,  113,  115,  131,  126,   84,  230,
       81,  116,  117,   82,  132,  362,  121,  127,  128,   58,
      129,  360,  130,   59,  177,  178,  184,  185,  153,  153,
       83,   78,  237,   85,   85,   85,   85,   85,  154,  200,
      201,  212,  157,  157,  157,  157,  157,  207,   86,   87,
       86,  313,  208,   58,  238,  217,  213,  158,  159,  158,

      285,   88,  218,  286,   58,   86,   87,   86,  222,  311,
      223,   58,   58,  137,  158,  159,  158,  137,   78,  250,
       80,   80,   80,   80,   80,  449,  138,  138,  138,  139,
      244,  244,  166,  161,  166,  446,   82,  167,  167,  167,
      167,  167,   59,  170,  170,  170,  170,   80,  164,  227,
      245,  140,  161,   82,  274,  275,  137,  173,  246,  173,
      137,  445,  174,  174,  174,  174,  174,  137,  442,  245,
      137,   84,  137,  141,  142,  312,  153,  153,  142,  171,
      171,  171,  171,  171,  219,   58,  154,  143,  143,  143,
      144,  175,  175,  175,  175,  175,  441,  146,  225,  225,

      225,  225,  220,  161,   58,  440,  221,  172,  153,  153,
       58,   58,  145,  229,  229,  229,  229,  142,  154,   88,
      439,  142,  161,   59,  226,  226,  226,  226,  142,  438,
      436,  142,   58,  142,  146,  148,  148,  148,  148,  148,
      435,  142,  142,  142,  142,  434,  433,  432,   59,   59,
      149,  150,  149,  232,  431,  232,  235,  235,  233,  233,
      233,  233,  233,  151,   58,  430,  154,  149,  150,  149,
       78,  236,  160,  160,  160,  160,   80,  316,  148,  148,
      148,  148,  148,  167,  167,  167,  167,  167,   82,  241,
      429,  241,  161,  162,  242,  242,  242,  242,  242,  238,

      163,  156,  359,  254,  254,   82,  151,  427,  153,  153,
      322,  161,  239,  239,  239,  239,  239,   78,  154,   80,
       80,   80,   80,   80,  254,  254,  316,  158,  159,  158,
      174,  174,  174,  174,  174,   82,  244,  244,  426,  161,
      240,  153,  153,  425,  158,  159,  158,  164,  238,  251,
       58,  154,   82,  160,  160,  160,  160,   80,  161,   80,
       80,   80,   80,   80,  246,  247,  247,  247,  247,  247,
      424,  253,  423,  254,  162,  256,  256,  256,  256,  255,
      248,  163,  248,  422,  421,  420,  419,  164,   59,  418,
      253,  417,  416,  249,  254,  413,  257,  248,  412,  248,

      411,  410,  409,  258,  171,  171,  171,  171,  171,  259,
      259,  259,  259,  259,  262,  262,  262,  262,  262,   58,
       58,  408,  407,  406,  260,  405,  260,  404,  142,  142,
      142,  142,  172,  226,  226,  226,  226,  261,  403,  402,
      401,  260,  263,  260,  233,  233,  233,  233,  233,  314,
      314,  314,  314,  314,  244,  244,  400,  399,   59,  242,
      242,  242,  242,  242,  149,  398,  149,  239,  239,  239,
      239,  239,  397,  254,  245,  396,  230,  315,  394,  322,
      393,  149,  246,  149,  317,  317,  317,  317,  317,  392,
      391,  390,   58,  245,  254,  240,  317,  317,  317,  317,

      317,  317,  389,  388,  318,  318,  318,  318,  318,  156,
      387,  386,  385,  317,  317,  317,  317,  317,  317,  158,
      384,  158,  247,  247,  247,  247,  247,  450,  383,  251,
      359,  238,  319,  322,  382,  381,  158,  248,  158,  248,
      247,  247,  247,  247,  247,  450,  380,  379,  450,  378,
      249,  253,  414,  254,  248,  323,  248,  323,  377,  255,
      324,  324,  324,  324,  324,  376,  375,  450,  249,  450,
      253,  374,  373,   78,  254,   80,   80,   80,   80,   80,
      372,  256,  256,  256,  256,   80,  450,  371,  370,  369,
      450,   82,  368,  364,  361,  161,  259,  259,  259,  259,

      259,  358,  257,  164,  357,  356,  355,  354,   82,  258,
      353,  260,  352,  260,  161,  259,  259,  259,  259,  259,
      351,  350,  349,  348,  261,  347,  346,  345,  260,  344,
      260,  262,  262,  262,  262,  262,  314,  314,  314,  314,
      314,  343,  342,  261,  314,  314,  314,  314,  314,  341,
      340,  149,  339,  149,  324,  324,  324,  324,  324,  263,
      338,  337,  306,  336,  315,  335,  334,  333,  149,  332,
      149,  331,  315,  363,  363,  363,  363,  363,  330,  329,
      318,  318,  318,  318,  318,  363,  363,  363,  363,  363,
      363,  328,  327,  326,  325,  158,  320,  158,  156,  310,

      309,  308,  363,  363,  363,  363,  363,  363,  319,  307,
      306,  305,  158,  304,  158,  318,  318,  318,  318,  318,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      303,  302,  301,  300,  299,  366,  298,  366,  297,  296,
      295,  294,  293,  319,  292,  291,  290,  289,  367,  288,
      287,  284,  366,  367,  366,  395,  395,  395,  395,  395,
      283,  282,  365,  365,  365,  365,  365,  395,  395,  395,
      395,  395,  395,  281,  280,  279,  278,  366,  277,  366,
      276,  273,  272,  271,  395,  395,  395,  395,  395,  395,
      367,  270,  269,  268,  366,  267,  366,  415,  415,  415,

      415,  415,  266,  265,  264,  243,  156,  146,   58,  415,
      415,  415,  415,  415,  415,  444,  444,  444,  444,  141,
      224,  216,  215,  214,  211,  210,  415,  415,  415,  415,
      415,  415,   58,  209,  206,  205,  162,  204,  203,  202,
      199,  198,  197,  438,  196,  428,  428,  428,  428,  428,
      195,  194,  448,  448,  448,  448,  193,  428,  428,  428,
      428,  428,  428,  192,  191,  190,  189,  188,  187,  186,
       59,  183,  182,  257,  428,  428,  428,  428,  428,  428,
      445,  181,  180,  179,  176,  168,  156,  147,   58,  134,
      133,  125,  414,  437,  437,  437,  437,  437,  118,  114,

       95,   92,   89,   66,   65,  437,  437,  437,  437,  437,
      437,   61,   56,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  437,  437,  437,  437,  437,  437,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
       57,  443,  443,  443,  443,  443,  450,  450,  450,  450,
      450,  450,  450,  443,  443,  443,  443,  443,  443,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      443,  443,  443,  443,  443,  443,  447,  447,  447,  447,
      447,  450,  450,  450,  450,  450,  450,  450,  447,  447,
      447,  447,  447,  447,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  447,  447,  447,  447,  447,
      447,   57,  450,   57,   57,   57,   57,   57,   57,   57,
       60,  450,  450,   60,   60,   60,   60,   64,  450,   64,
      450,   64,   64,   64,   64,   64,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  155,  450,  155,  155,  155,
      155,  155,  155,  155,  169,  169,  228,  450,  450,  228,
      231,  450,  450,  231,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  252,  252,  252,  252,  321,  450,  321,
        3,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450
    } ;

static yyconst short int yy_chk[1257] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    7,    5,    7,    9,
       12,   17,   20,   52,   19,   55,   20,   55,   20,   20,
       20,   20,   20,   35,   17,   19,   19,   21,   12,   26,

       26,   38,   21,   28,   28,   36,   37,   36,   35,  468,
       38,   21,   45,   37,   36,  145,   37,    9,   22,   37,
       22,   22,   22,   22,   22,   57,   39,   45,   39,   52,
       45,   40,  467,   22,   81,   81,   22,   39,   44,   40,
       22,   40,   44,   22,   40,   42,   48,   47,   22,  145,
       22,   42,   42,   22,   48,  466,   44,   47,   47,   22,
       47,  465,   47,   57,   94,   94,  101,  101,   75,   75,
       22,   23,  156,   23,   23,   23,   23,   23,   75,  117,
      117,  127,   78,   78,   78,   78,   78,  123,   23,   23,
       23,  463,  123,   23,  156,  131,  127,   78,   78,   78,

      199,   23,  131,  199,  137,   23,   23,   23,  133,  462,
      133,  140,   23,   59,   78,   78,   78,   59,   80,  460,
       80,   80,   80,   80,   80,  446,   59,   59,   59,   59,
      165,  165,   82,  444,   82,  442,   80,   82,   82,   82,
       82,   82,  137,   84,   84,   84,   84,   84,   80,  140,
      165,   59,  444,   80,  188,  188,   59,   87,  165,   87,
       59,  439,   87,   87,   87,   87,   87,   59,  435,  165,
       59,   84,   59,   59,   65,  230,  152,  152,   65,   85,
       85,   85,   85,   85,  132,  138,  152,   65,   65,   65,
       65,   88,   88,   88,   88,   88,  432,  230,  138,  138,

      138,  138,  132,  448,  143,  431,  132,   85,  153,  153,
      226,  139,   65,  143,  143,  143,  143,   65,  153,   88,
      430,   65,  448,  138,  139,  139,  139,  139,   65,  429,
      426,   65,  144,   65,   65,   74,   74,   74,   74,   74,
      425,  144,  144,  144,  144,  423,  422,  421,  226,  139,
       74,   74,   74,  150,  420,  150,  154,  154,  150,  150,
      150,  150,  150,   74,  310,  417,  154,   74,   74,   74,
       79,  154,   79,   79,   79,   79,   79,  237,  151,  151,
      151,  151,  151,  166,  166,  166,  166,  166,   79,  159,
      416,  159,   79,   79,  159,  159,  159,  159,  159,  237,

       79,  415,  310,  251,  250,   79,  151,  413,  234,  234,
      250,   79,  157,  157,  157,  157,  157,  160,  234,  160,
      160,  160,  160,  160,  251,  250,  316,  157,  157,  157,
      173,  173,  173,  173,  173,  160,  246,  246,  412,  160,
      157,  235,  235,  411,  157,  157,  157,  160,  316,  169,
      447,  235,  160,  163,  163,  163,  163,  163,  160,  164,
      164,  164,  164,  164,  246,  167,  167,  167,  167,  167,
      410,  169,  409,  169,  163,  170,  170,  170,  170,  169,
      167,  163,  167,  406,  405,  404,  400,  164,  447,  398,
      169,  397,  396,  167,  169,  393,  170,  167,  392,  167,

      390,  388,  384,  170,  172,  172,  172,  172,  172,  174,
      174,  174,  174,  174,  175,  175,  175,  175,  175,  229,
      225,  383,  382,  380,  174,  379,  174,  377,  229,  229,
      229,  229,  172,  225,  225,  225,  225,  174,  376,  375,
      373,  174,  175,  174,  232,  232,  232,  232,  232,  233,
      233,  233,  233,  233,  244,  244,  372,  371,  225,  241,
      241,  241,  241,  241,  233,  369,  233,  240,  240,  240,
      240,  240,  368,  321,  244,  364,  361,  233,  359,  321,
      357,  233,  244,  233,  238,  238,  238,  238,  238,  356,
      355,  354,  394,  244,  321,  240,  238,  238,  238,  238,

      238,  238,  353,  351,  242,  242,  242,  242,  242,  238,
      350,  348,  347,  238,  238,  238,  238,  238,  238,  242,
      346,  242,  247,  247,  247,  247,  247,  322,  345,  252,
      394,  238,  242,  322,  344,  343,  242,  247,  242,  247,
      249,  249,  249,  249,  249,  255,  342,  341,  322,  340,
      247,  252,  394,  252,  247,  254,  247,  254,  339,  252,
      254,  254,  254,  254,  254,  337,  336,  255,  249,  255,
      252,  335,  334,  256,  252,  256,  256,  256,  256,  256,
      333,  258,  258,  258,  258,  258,  255,  328,  327,  326,
      255,  256,  325,  320,  312,  256,  259,  259,  259,  259,

      259,  309,  258,  256,  308,  305,  304,  302,  256,  258,
      301,  259,  300,  259,  256,  261,  261,  261,  261,  261,
      299,  298,  297,  296,  259,  295,  294,  293,  259,  292,
      259,  263,  263,  263,  263,  263,  314,  314,  314,  314,
      314,  290,  288,  261,  315,  315,  315,  315,  315,  287,
      286,  314,  285,  314,  323,  323,  323,  323,  323,  263,
      283,  282,  281,  280,  314,  277,  276,  275,  314,  274,
      314,  273,  315,  317,  317,  317,  317,  317,  271,  268,
      318,  318,  318,  318,  318,  317,  317,  317,  317,  317,
      317,  267,  266,  265,  257,  318,  243,  318,  317,  227,

      224,  223,  317,  317,  317,  317,  317,  317,  318,  222,
      220,  219,  318,  218,  318,  319,  319,  319,  319,  319,
      324,  324,  324,  324,  324,  367,  367,  367,  367,  367,
      217,  216,  215,  214,  213,  324,  212,  324,  211,  210,
      209,  208,  207,  319,  206,  205,  203,  202,  324,  201,
      200,  198,  324,  367,  324,  363,  363,  363,  363,  363,
      196,  195,  365,  365,  365,  365,  365,  363,  363,  363,
      363,  363,  363,  194,  193,  192,  191,  365,  190,  365,
      189,  187,  186,  185,  363,  363,  363,  363,  363,  363,
      365,  184,  183,  182,  365,  181,  365,  395,  395,  395,

      395,  395,  180,  179,  178,  162,  155,  146,  142,  395,
      395,  395,  395,  395,  395,  438,  438,  438,  438,  141,
      134,  130,  129,  128,  126,  125,  395,  395,  395,  395,
      395,  395,  414,  124,  122,  121,  438,  120,  119,  118,
      116,  114,  113,  438,  112,  414,  414,  414,  414,  414,
      111,  110,  445,  445,  445,  445,  109,  414,  414,  414,
      414,  414,  414,  108,  107,  106,  105,  104,  103,  102,
      414,  100,   99,  445,  414,  414,  414,  414,  414,  414,
      445,   98,   97,   96,   90,   83,   76,   73,   64,   50,
       49,   46,  414,  428,  428,  428,  428,  428,   43,   41,

       34,   27,   24,   16,   13,  428,  428,  428,  428,  428,
      428,   11,    8,    3,    0,    0,    0,    0,    0,    0,
        0,    0,  428,  428,  428,  428,  428,  428,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      428,  437,  437,  437,  437,  437,    0,    0,    0,    0,
        0,    0,    0,  437,  437,  437,  437,  437,  437,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      437,  437,  437,  437,  437,  437,  443,  443,  443,  443,
      443,    0,    0,    0,    0,    0,    0,    0,  443,  443,
      443,  443,  443,  443,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  443,  443,  443,  443,  443,
      443,  451,    0,  451,  451,  451,  451,  451,  451,  451,
      452,    0,    0,  452,  452,  452,  452,  453,    0,  453,
        0,  453,  453,  453,  453,  453,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  455,    0,  455,  455,  455,
      455,  455,  455,  455,  456,  456,  457,    0,    0,  457,
      458,    0,    0,  458,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  461,  461,  461,  461,  464,    0,  464,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define INITIAL 0
#line 2 "scanner.l"
#include<bits/stdc++.h>
// {Comment}				{yylval.str = strdup(yytext); return COMMENT;}
#include<iostream>
#include <stdio.h>
using namespace std;
#include <string>
#include <vector>
#include <unordered_map>
#include "tree.h"
#include "parser.h"
// #include "mini.tab.h"
int yylex();
void help();
extern int column = 0;

// extern int only_lexer;
// extern FILE* lexer_file;

void col();

#line 888 "scanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 127 "scanner.l"


#line 1053 "scanner.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 451 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1181 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 129 "scanner.l"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 130 "scanner.l"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 133 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SUPER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "scanner.l"
{ col(); yylval.str = strdup(yytext); return BYTE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 135 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CASE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CATCH;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "scanner.l"
{ col(); yylval.str = strdup(yytext); return IMPLEMENTS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "scanner.l"
{ col(); yylval.str = strdup(yytext); return IMPORT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 139 "scanner.l"
{ col(); yylval.str = strdup(yytext); return INSTANCEOF;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "scanner.l"
{ col(); yylval.str = strdup(yytext); return INT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 141 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CHAR;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CLASS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 143 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CONST;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CONTINUE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SWITCH;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SYNCHRONIZED;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "scanner.l"
{ col(); yylval.str = strdup(yytext); return THIS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "scanner.l"
{ col(); yylval.str = strdup(yytext); return THROW;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "scanner.l"
{ col(); yylval.str = strdup(yytext); return THROWS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "scanner.l"
{ col(); yylval.str = strdup(yytext); return TRANSIENT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "scanner.l"
{ col(); yylval.str = strdup(yytext); return TRY;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "scanner.l"
{ col(); yylval.str = strdup(yytext); return INTERFACE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ABSTRACT;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ASSERT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "scanner.l"
{ col(); yylval.str = strdup(yytext); return BOOLEAN;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "scanner.l"
{ col(); yylval.str = strdup(yytext); return BREAK;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "scanner.l"
{ col(); yylval.str = strdup(yytext); return FOR;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "scanner.l"
{ col(); yylval.str = strdup(yytext); return IF;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "scanner.l"
{ col(); yylval.str = strdup(yytext); return GOTO;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 160 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PRIVATE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PROTECTED;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 162 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PUBLIC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 163 "scanner.l"
{ col(); yylval.str = strdup(yytext); return RETURN;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 164 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SHORT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 165 "scanner.l"
{ col(); yylval.str = strdup(yytext); return STATIC;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 166 "scanner.l"
{ col(); yylval.str = strdup(yytext); return STRICTFP;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 167 "scanner.l"
{ col(); yylval.str = strdup(yytext); return LONG;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 168 "scanner.l"
{ col(); yylval.str = strdup(yytext); return NATIVE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 169 "scanner.l"
{ col(); yylval.str = strdup(yytext); return NEW;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 170 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DEFAULT;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 171 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DO;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 172 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DOUBLE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ELSE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 174 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ENUM;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 175 "scanner.l"
{ col(); yylval.str = strdup(yytext); return EXTENDS;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 176 "scanner.l"
{ col(); yylval.str = strdup(yytext); return FINAL;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 177 "scanner.l"
{ col(); yylval.str = strdup(yytext); return FINALLY;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 178 "scanner.l"
{ col(); yylval.str = strdup(yytext); return FLOAT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 179 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PACKAGE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 180 "scanner.l"
{ col(); yylval.str = strdup(yytext); return VOID;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "scanner.l"
{ col(); yylval.str = strdup(yytext); return VOLATILE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "scanner.l"
{ col(); yylval.str = strdup(yytext); return WHILE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 185 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ADD;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 186 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SUBTRACT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 187 "scanner.l"
{ col(); yylval.str = strdup(yytext); return MULTIPLY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 188 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DIVISION;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 189 "scanner.l"
{ col(); yylval.str = strdup(yytext); return EQUALS;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 190 "scanner.l"
{ col(); yylval.str = strdup(yytext); return GT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 191 "scanner.l"
{ col(); yylval.str = strdup(yytext); return LT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 192 "scanner.l"
{ col(); yylval.str = strdup(yytext); return NT;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 193 "scanner.l"
{ col(); yylval.str = strdup(yytext); return TILDA;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 194 "scanner.l"
{ col(); yylval.str = strdup(yytext); return QUESTION_MARK;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 195 "scanner.l"
{ col(); yylval.str = strdup(yytext); return COLON;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 196 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ARROW;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 197 "scanner.l"
{ col(); yylval.str = strdup(yytext); return EQEQ;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 198 "scanner.l"
{ col(); yylval.str = strdup(yytext); return GREQ;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 199 "scanner.l"
{ col(); yylval.str = strdup(yytext); return LEQ;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 200 "scanner.l"
{ col(); yylval.str = strdup(yytext); return LTLT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 201 "scanner.l"
{ col(); yylval.str = strdup(yytext); return GRGR;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 202 "scanner.l"
{ col(); yylval.str = strdup(yytext); return GRGRGR;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 203 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DGRGR;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 204 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DLRLR;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 205 "scanner.l"
{ col(); yylval.str = strdup(yytext); return TGRGRGR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 206 "scanner.l"
{ col(); yylval.str = strdup(yytext); return NEQUALS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 207 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PLUSPLUS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 208 "scanner.l"
{ col(); yylval.str = strdup(yytext); return MINUSMINUS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 209 "scanner.l"
{ col(); yylval.str = strdup(yytext); return OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 210 "scanner.l"
{ col(); yylval.str = strdup(yytext); return AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 211 "scanner.l"
{ col(); yylval.str = strdup(yytext); return BINARYOR;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 212 "scanner.l"
{ col(); yylval.str = strdup(yytext); return BINARYAND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 213 "scanner.l"
{ col(); yylval.str = strdup(yytext); return POW;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 214 "scanner.l"
{ col(); yylval.str = strdup(yytext); return MOD;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 215 "scanner.l"
{ col(); yylval.str = strdup(yytext); return PLEQ;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 216 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SBEQ;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 217 "scanner.l"
{ col(); yylval.str = strdup(yytext); return MULEQ;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 218 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ANDEQ;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 219 "scanner.l"
{ col(); yylval.str = strdup(yytext); return OREQ;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 220 "scanner.l"
{ col(); yylval.str = strdup(yytext); return POWEQ;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 221 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DIVEQ;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 222 "scanner.l"
{ col(); yylval.str = strdup(yytext); return MODEQ;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 225 "scanner.l"
{ col(); yylval.str = strdup(yytext); return OS;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 226 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CS;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 227 "scanner.l"
{ col(); yylval.str = strdup(yytext); return ATR;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 228 "scanner.l"
{ col(); yylval.str = strdup(yytext); return TDT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 229 "scanner.l"
{ col(); yylval.str = strdup(yytext); return FST;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 230 "scanner.l"
{ col(); yylval.str = strdup(yytext); return SCLN;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 231 "scanner.l"
{ col(); yylval.str = strdup(yytext); return OSQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 232 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CSQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 233 "scanner.l"
{ col(); yylval.str = strdup(yytext); return OC;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 234 "scanner.l"
{ col(); yylval.str = strdup(yytext); return CC;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 235 "scanner.l"
{ col(); yylval.str = strdup(yytext); return COMMA;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 236 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DISTO;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 237 "scanner.l"
{ col(); yylval.str = strdup(yytext); return DST;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 238 "scanner.l"
{col();yylval.str = strdup(yytext); return LITERAL;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 239 "scanner.l"
{col(); yylval.str = strdup(yytext); return IDENTIFIER;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 240 "scanner.l"
{col(); yylval.str = strdup(yytext); return ERROR;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 241 "scanner.l"
{}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 242 "scanner.l"
ECHO;
	YY_BREAK
#line 1684 "scanner.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 451 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 451 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 450);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 242 "scanner.l"


void col()
{
	int i=0;
	while(yytext[i]!='\0')
	{
		if (yytext[i] == '\n')
		{
			column = 0;
		}
		else if (yytext[i] == '\t')
			column += 4 - (column% 4);
		else
			column++;
		i++;
	}
}